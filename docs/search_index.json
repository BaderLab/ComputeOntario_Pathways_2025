[["index.html", "Compute Ontario - Bioinformatics for Pathway Enrichment Analysis ( June 2025 ) Compute Ontario Summer School", " Compute Ontario - Bioinformatics for Pathway Enrichment Analysis ( June 2025 ) Ruth Isserlin, Veronique Voisin last modified 2025-05-27 Compute Ontario Summer School This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. Icons are from the “Very Basic. Android L Lollipop” set by Ivan Boyko licensed under CC BY 3.0 and Icons8. "],["welcome.html", "Welcome Meet your Faculty Pre-Workshop Materials and Laptop Setup Instructions Pre-workshop Tutorials", " Welcome Welcome to Bioinformatics for Pathway Enrichment Analysis - June 2025 Meet your Faculty Veronique Voisin Research Associate, Donnelly Centre for Cellular and Biomolecular Research, University of Toronto Veronique is currently a bioinformatician applying pathway and networks analysis to high throughput genomics data for OICR cancer stem cell program. Previously, she worked on characterizing the gene signatures of different types of leukemias using a murine model     Ruth Isserlin Research data analyst,Donnelly Centre for Cellular and Bimolecular Research, University of Toronto Bioinformatician and data analyst in the Bader lab applying pathway and data analysis to varied data types. Developed Enrichment Map App for Cytoscape, an app to visually translate functional enrichment results from popular enrichment tools like GSEA to networks. Further developed the Enrichment Map Pipeline including development of additional Apps to help summarize and analyze resulting Enrichment Maps, including PostAnalysis, WordCloud, and AutoAnnotate App. Thank you for attending the Bioinformatics for Pathway Enrichment Analysis workshop! Help us make this workshop better by filling out our survey. Pre-Workshop Materials and Laptop Setup Instructions Laptop Setup Instructions A Check list to setup your laptop can be found here Install these tools on your laptop before coming to the workshop: Basic programs A robust text editor: For Windows/PC - notepad++ For Linux - gEdit For Mac – TextWrangler A file decompression tool. For Windows/PC – 7zip. For Linux – gzip. For Mac – already there. A robust internet browser such as: Firefox Safari Chrome Microsoft Edge A PDF Viewer Adobe Acrobat or equivalent Cytoscape Installation Please install the latest version of Cytoscape 3.10.3 or Cytoscape Download as well as a group of Cytoscape Apps that we will be using for different parts of the course. Install Cytoscape 3.10.3: Go to: https://github.com/cytoscape/cytoscape/releases/3.10.3/ OR https://cytoscape.org/download.html Choose the version corresponding to your operating system (OS, Windows or UNIX) Follow instructions to install cytoscape Verify that Cytoscape has been installed correctly by launching the newly installed application Install the following Cytoscape Apps - Apps are installed from within Cytoscape. In order to install Apps launch Cytoscape From the menu bar, select ‘Apps’, then ‘App Store’, then ‘Show App Store’. App Store will appear in left hand Panel Within search bar at the top of the panel, search for the app listed below. Once you click on search icon a web browser will be launched with the apps that match your search. Select the correct app (there might be a few that match your search term). Click on “Install” install the following: EnrichmentMap 3.5.0 EnrichmentMap Pipeline Collection 1.1.0 (it will install ClusterMaker2 v2.3.4, WordCloud v3.1.4 and AutoAnnotate v1.5.0) GeneMANIA 3.5.3 stringApp 2.0.3 yFiles Layout Algorithms 1.1.4 RStudio Installation Please install the latest version of RStudio Download R and RStudio Go to the RStudio page Locate the Download page and download the version corresponding to your system MAC users: https://download1.rstudio.org/electron/macos/RStudio-2025.05.0-496.dmg Window users: https://download1.rstudio.org/electron/windows/RStudio-2025.05.0-496.exe Unix users: https://download1.rstudio.org/electron/jammy/amd64/rstudio-2025.05.0-496-amd64.deb Download and install R Download and install RStudio Launch RStudio to test it. Install required packages fGSEA clusterprofiler GSA httr RCurl gpplot2 Pre-workshop Tutorials It is in your best interest to complete these before the workshop. Cytoscape Preparation tutorials Go to : https://github.com/cytoscape/cytoscape-tutorials/wiki and follow : Tour of Cytoscape Basic Data Visualization Pre-workshop Readings and Lectures Video Module 1 - Introduction to Pathway and Network Analysis by Gary Bader Pathway enrichment analysis and visualization of omics data using g:Profiler, GSEA, Cytoscape and EnrichmentMap Reimand J, Isserlin R, Voisin V, Kucera M, Tannus-Lopes C, Rostamianfar A, Wadi L, Meyer M, Wong J, Xu C, Merico D, Bader GD Nat Protoc. 2019 Feb;14(2):482-517 - Available here as well Additional tutorials How to visually interpret biological data using networks Merico D, Gfeller D, Bader GD Nature Biotechnology 2009 Oct 27, 921-924 - Available here as well g:Profiler–a web-based toolset for functional profiling of gene lists from large-scale experiments. Reimand J, Kull M, Peterson H, Hansen J, Vilo J Nucleic Acids Res. 2007 Jul;35 g:Profiler: a web server for functional enrichment analysis and conversions of gene lists (2019 update) Raudvere U, Kolberg L, Kuzmin I, Arak T, Adler P, Peterson H, Vilo J Nucleic Acids Res. 2019 May 8 Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles Subramanian A, Tamayo P, Mootha VK, Mukherjee S, Ebert BL, Gillette MA, Paulovich A, Pomeroy SL, Golub TR, Lander ES, Mesirov JP Proc Natl Acad Sci U S A. 2005 Oct 25;102(43) Interacting with Cytoscape using CyRest and command lines (for advanced users): https://github.com/cytoscape/cytoscape-automation/blob/master/for-scripters/R/advanced-cancer-networks-and-data-rcy3.Rmd "],["intro.html", "Module 1 - Introduction to Pathway and Network Analysis (Gary Bader)", " Module 1 - Introduction to Pathway and Network Analysis (Gary Bader) Lecture Recorded Lecture 1 "],["module-2-finding-over-represented-pathways-veronique-voisin.html", "Module 2: Finding Over-represented Pathways (Veronique Voisin)", " Module 2: Finding Over-represented Pathways (Veronique Voisin) Veronique Voisin and Ruth Isserlin Lecture Lab practical part 1 (g:Profiler) Lab practical part 2 (fGSEA) "],["gprofiler-lab-new.html", "Module 2 lab - g:Profiler Introduction Goal of the exercise 1 Data Exercise 1 - run g:Profiler Exercise 2 - visualization", " Module 2 lab - g:Profiler This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. authors: Veronique Voisin and Ruth Isserlin Introduction During this practical lab, we will perform pathway enrichment analysis using a defined gene list. Goal of the exercise 1 For this exercise, our goal is to run pathway enrichment analysis using g:Profiler and explore the results. g:Profiler performs a gene-set enrichment analysis using a hypergeometric test (Fisher’s exact test). The Gene Ontology Biological Process, Reactome and WikiPathways sources are going to be used as pathway databases. g:Profiler can be used using the website at https://biit.cs.ut.ee/gprofiler/gost. However, for this practical lab, we will run it from the g:Profiler R package. We will run the query and explore the table of results and visualize the results as bar and dot plots. One of the greatest features of g:Profiler is that it is updated on a regular basis and most of the previous versions are available online ont the gprofiler archive. The gprofielr2 -g:Profiler R implementation is a wrapper for the web version. You require an internet connection to get enrichment results. Data g:Profiler requires a list of genes: for this, we use genes with frequent somatic SNVs identified in TCGA exome sequencing data of 3,200 tumors of 12 types. The MuSiC cancer driver mutation detection software was used to find 127 cancer driver genes that displayed higher than expected mutation frequencies in cancer samples (Supplementary Table 1, which is derived from column B of Supplementary Table 4 in Kandoth C. et al.. Exercise 1 - run g:Profiler Before starting this exercise, download the required files: Right click on link below and select “Save Link As…”. We recommend saving all these files in a personal project data folder before starting. We also recommend creating an additional result data folder to save the files generated while performing the protocol. Pancancer_genelist.txt Open RStudio and follow script instructions below. Step 1 - Install and Load libraries # List of required packages required_packages &lt;- c( &quot;tidyverse&quot;, # Data manipulation and visualization &quot;gprofiler2&quot;, # Functional enrichment analysis &quot;knitr&quot;, # Report generation &quot;kableExtra&quot;, # Enhanced tables &quot;glue&quot;, # String interpolation &quot;GSA&quot;, # Gene set analysis &quot;RCurl&quot;, # HTTP requests &quot;webshot2&quot;, # Web content capture &quot;ggridges&quot;, # Ridgeline plots &quot;igraph&quot;, # Network analysis &quot;stringr&quot; # String manipulation ) # Install any missing packages installed &lt;- rownames(installed.packages()) for (pkg in required_packages) { if (!(pkg %in% installed)) { install.packages(pkg) } } # Load all packages invisible(lapply(required_packages, library, character.only = TRUE)) Step 2 - Input query Save the gene list (Pancancer_genelist.txt) on your local computer. Remember where you stored it as you need to know the path to the file to start the practical lab. Find path on Windows: Using File Explorer Navigate to the file in File Explorer. Right-click the file and select “Properties”. In the General tab, look for: Location: This shows the folder path. File name: Combine this with the location to get the full path. Example: Location: C:\\Users\\Veronique\\Documents File name: example.txt Full path: C:\\Users\\Veronique\\Documents\\example.txt Find path on a Mac: Using Finder with Right-Click Open Finder and locate the file. Right-click (or Control-click) the file. Hold the Option key — the menu item “Copy [filename] as Pathname” will appear. Click it to copy the full file path. Paste it anywhere (e.g., in a Terminal or text editor) : /Users/veronique/Documents/example.txt ##The first step is to read the file containing the gene list. # For this purpose, we need to know the path to the file = where we stored our file on our computer # Please see my example below: # myfile = &quot;/Users/veronique/Documents/CO_summer_school/Pancancer_genelist.txt&quot; ##!!REPLACE BY YOUR PATH!!## myfile = &quot;./Module2/gprofiler/data/Pancancer_genelist.txt&quot; ##YOUR TURN: create the myfile object using the path to your file / name of the file ## #This function will read the genelist file and import it as a data frame object in our R environment current_genelist &lt;- read.table( file = myfile, header = FALSE, sep = &quot;\\t&quot;, quote = &quot;&quot;, stringsAsFactors = FALSE) #head(current_genelist) #class(current_genelist) #We take the gene list which is stored as the first column of our dataframe and convert it to a character vector for future use query_set &lt;- current_genelist$V1 #class(query_set) Step 3 - Run g:Profiler The next step is to run pathway enrichment analysis using gost g:Profiler using the g:Profiler2 R package. For detailed descriptions of all the parameters that can be specified for the gost g:profiler function see the R package information - here and here. For this query we are specifying - query - the set of genes of interest, as loaded in from the gene list file (query_set). significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its predetermined threshold. We will filter the results for significance in a next step. ordered_query - set to FALSE (because we are not taking into account the order of the list) exclude_iea - set to TRUE. We are removing the electronic inferred annotations from the GO database correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to “hsapiens” for homo sapiens. Organism names are constructed by concatenating the first letter of the name and the family name (according to gprofiler2 documentation) source - the geneset source databases to use for the analysis. We recommend using GO biological process (GO:BP), WikiPathways (WP) and Reactome (Reac) but there are additional sources you can add (GO molecular function or cellular component(GO:MF, GO:CC), KEGG, transcription factors (TF), microRNA targets (MIRNA), corum complexes (CORUM), Human protein atlas (HPA),Human phenotype ontology (HP) ) gprofiler_results &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = &quot;hsapiens&quot;, source = c(&quot;REAC&quot;,&quot;WP&quot;,&quot;GO:BP&quot;)) #get the gprofiler results table enrichment_results &lt;- gprofiler_results$result #display the names of all columns colnames(enrichment_results) ## [1] &quot;query&quot; &quot;significant&quot; &quot;p_value&quot; ## [4] &quot;term_size&quot; &quot;query_size&quot; &quot;intersection_size&quot; ## [7] &quot;precision&quot; &quot;recall&quot; &quot;term_id&quot; ## [10] &quot;source&quot; &quot;term_name&quot; &quot;effective_domain_size&quot; ## [13] &quot;source_order&quot; &quot;parents&quot; #display the top rows head(enrichment_results) ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 2.197504e-31 4820 117 99 ## 2 query_1 TRUE 9.219198e-31 5210 117 101 ## 3 query_1 TRUE 1.947743e-28 5688 117 102 ## 4 query_1 TRUE 2.634097e-25 4388 117 89 ## 5 query_1 TRUE 4.567813e-25 3542 117 81 ## 6 query_1 TRUE 1.556961e-24 4278 117 87 ## precision recall term_id source ## 1 0.8461538 0.02053942 GO:0080090 GO:BP ## 2 0.8632479 0.01938580 GO:0060255 GO:BP ## 3 0.8717949 0.01793249 GO:0019222 GO:BP ## 4 0.7606838 0.02028259 GO:0010556 GO:BP ## 5 0.6923077 0.02286844 GO:0019219 GO:BP ## 6 0.7435897 0.02033661 GO:0010468 GO:BP ## term_name ## 1 regulation of primary metabolic process ## 2 regulation of macromolecule metabolic process ## 3 regulation of metabolic process ## 4 regulation of macromolecule biosynthetic process ## 5 regulation of nucleobase-containing compound metabolic process ## 6 regulation of gene expression ## effective_domain_size source_order parents ## 1 16175 17800 GO:0019222, GO:0044238 ## 2 16175 14472 GO:0019222, GO:0043170 ## 3 16175 5599 GO:0008152, GO:0050794 ## 4 16175 4209 GO:0009059, GO:0009889, GO:0060255 ## 5 16175 5596 GO:0006139, GO:0080090 ## 6 16175 4161 GO:0010467, GO:0010556 The enrichment_results dataframe contains different columns. Let’s rearrange the table to display the most important information. We will arrange the table so it contains: the database origin, the name of each of the pathway, term size , query size, intersection size and adjusted pvalue. - Term size: number of genes in the pathway as it is in the database Query size: number of genes in our gene list Intersection size: number of genes overlapping between our gene list and the tested pathway pvalue: adjusted pvalue (corrected for multiple hypothesis testing using the Benjamini-Hochberg method) The results are ordered by significance, from the most significant pathway (lowest p-value) to the least significant. enrichment_results$p_value &lt;- formatC(enrichment_results$p_value, format = &quot;e&quot;, digits = 2) enrichment_results = enrichment_results[ , c(&quot;source&quot;, &quot;term_name&quot;, &quot;term_size&quot;, &quot;query_size&quot;, &quot;intersection_size&quot;, &quot;p_value&quot;)] kable(head(enrichment_results, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 1: Table 2: Enrichment Result source term_name term_size query_size intersection_size p_value GO:BP regulation of primary metabolic process 4820 117 99 2.20e-31 GO:BP regulation of macromolecule metabolic process 5210 117 101 9.22e-31 GO:BP regulation of metabolic process 5688 117 102 1.95e-28 GO:BP regulation of macromolecule biosynthetic process 4388 117 89 2.63e-25 GO:BP regulation of nucleobase-containing compound metabolic process 3542 117 81 4.57e-25 GO:BP regulation of gene expression 4278 117 87 1.56e-24 GO:BP regulation of biosynthetic process 4519 117 89 1.56e-24 GO:BP positive regulation of macromolecule metabolic process 2767 117 72 1.99e-24 GO:BP DNA-templated transcription 3142 117 76 1.99e-24 GO:BP regulation of DNA-templated transcription 3003 117 74 5.43e-24 GO:BP regulation of RNA biosynthetic process 3022 117 74 7.44e-24 GO:BP positive regulation of cellular process 4915 117 91 1.12e-23 GO:BP nucleic acid biosynthetic process 3915 117 82 3.02e-23 GO:BP phosphorylation 1132 117 48 6.35e-23 GO:BP regulation of RNA metabolic process 3273 117 75 1.35e-22 GO:BP positive regulation of metabolic process 3045 117 72 4.48e-22 GO:BP positive regulation of biological process 5229 117 91 1.13e-21 GO:BP RNA biosynthetic process 3822 117 79 1.39e-21 GO:BP nucleic acid metabolic process 4503 117 85 1.39e-21 GO:BP protein phosphorylation 1045 117 45 1.39e-21 Step 4 - Explore top table of results For this analysis, we chose to use 3 databases: GO:BP, Reactome and Wikipathways. If we look at the top table only, we are only going to see the results of GO:BP but it is interesting to look at the top results for each of the 3 databunique(enrichment_results$source) ##Get the name of the databases unique(enrichment_results$source) ## [1] &quot;GO:BP&quot; &quot;REAC&quot; &quot;WP&quot; ##Filter the dataframe to retrieve only the Reacome results enrichment_results_Reac &lt;- enrichment_results %&gt;% filter(source == &quot;REAC&quot;) ##Now display the top 20 pathways kable(head(enrichment_results_Reac, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 3: Table 4: Enrichment Result source term_name term_size query_size intersection_size p_value REAC Diseases of signal transduction by growth factor receptors and second messengers 418 107 30 2.42e-15 REAC Disease 1767 107 55 1.52e-14 REAC Gene expression (Transcription) 1519 107 47 1.13e-11 REAC Generic Transcription Pathway 1235 107 42 1.62e-11 REAC RNA Polymerase II Transcription 1356 107 43 6.57e-11 REAC PI3K/AKT Signaling in Cancer 92 107 13 7.33e-10 REAC Signal Transduction 2548 107 57 2.46e-09 REAC ESR-mediated signaling 216 107 17 3.59e-09 REAC Signaling by Nuclear Receptors 290 107 19 4.83e-09 REAC Developmental Biology 1225 107 37 1.27e-08 REAC PIP3 activates AKT signaling 253 107 17 3.15e-08 REAC Cellular responses to stress 792 107 28 1.21e-07 REAC Transcriptional regulation by RUNX3 95 107 11 1.47e-07 REAC Cellular responses to stimuli 806 107 28 1.53e-07 REAC Negative regulation of the PI3K/AKT network 99 107 11 2.00e-07 REAC Signaling by FLT3 ITD and TKD mutants 15 107 6 2.04e-07 REAC Intracellular signaling by second messengers 293 107 17 2.04e-07 REAC Formation of definitive endoderm 15 107 6 2.04e-07 REAC Transcriptional Regulation by TP53 359 107 18 5.33e-07 REAC SUMO E3 ligases SUMOylate target proteins 171 107 13 5.33e-07 ##YOUR TURN## ##DISPLAY THE TOP 20 PATHWAYS FOR THE WIKIPATHWAY DATABASE (&quot;WP&quot;) Step 5 - Filter results by geneset size Restrict the results to just the ones that have at maximum gene-set size of 1000 and a minimum gene-set size of 10 and with an adjusted pvalue of 0.05.- maximum gene-set size of 1000: will remove very generic pathway terms that are less informative like “regulation of gene expression” minimum gene-set size of 10: will remove small pathways where the pvalue is significant athough the overlap size is very small p_thres: aim is to retrieve only pathways that are significant under this adjusted pvalue threshold of 0.05 (5% false positive) min_gs_size = 3 max_gs_size = 1000 p_thres = 0.05 # filer by params defined above # by default we have set the max and min gs size to 250 and 3, respectively. ##the pvalue was stored as a character vector, we have to transform back into a numerical vector to be able to use it to filter values enrichment_results$p_value &lt;- as.numeric(enrichment_results$p_value) enrichment_results_mxgssize_1000_min_10_adjp_0_05 &lt;- subset(enrichment_results, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; p_value &lt;= p_thres ) # myrows = nrow(enrichment_results_mxgssize_1000_min_10_adjp_0_05) print(glue(&quot;It results in {myrows} selected pathways with maximum gene-set size of {max_gs_size} and minimum gene-set of {min_gs_size} with an adjusted p-value of {p_thres} . &quot;)) ## It results in 2080 selected pathways with maximum gene-set size of 1000 and minimum gene-set of 3 with an adjusted p-value of 0.05 . In a second step, try different thresholds of maximum gene-set size and adjusted pvalue threshold: 500 and 250 for * max_gs_size and 0.01 or 0.001 for pvalue- Option 1 * max_gs_size = 500 * p_thres = 0.01 or Option 2 * max_gs_size = 250 * p_thres = 0.001 ##YOUR TURN## ## How many pathways do you get for each option (nrow()): copy your answer in the chat Step 6 - Run g:profiler with your own genesets (example using BaderLab genesets) With regards to pathway sets there are two options when using g:Profiler - Use the genesets that are supplied by g:Profiler as we just did. Upload your own genesets. The most common reasons for supplying your own genesets is the ability to use up to date annotations or in-house annotations that might not be available in the public sphere yet. It can be used to test the enrichment in a particular pathway of interest that might not be in the general pathway database but that you obtained for example by extracting the data from a published paper. You need to format this pathway in a .gmt file. In this example, we will upload the Baderlab gene set file that contains multiple database sources. We will filter the gene-set prior to uploading the gene-set file to g:Profiler. This way, it will ensure that Step 7 - Download and load Bader lab geneset file Download the latest Bader lab genesets The file will be downloaded on your local computer in the workin directory (working_dir) of your choice. dest_gmt_file = &quot;&quot; #working_dir = &quot;/Users/veronique/Documents/CO_summer_school&quot; working_dir = file.path(getwd(),&quot;Module2&quot;,&quot;gprofiler&quot;,&quot;data&quot;) ## YOUR TURN: replace working directory by your own path to your working directory ## if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = RCurl::getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include # terms inferred from electronic annotations(IEA) #start with gmt file that has pathways only rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(working_dir,gmt_file) if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } Load in the GMT file This step will take the gmt file that we just downloaded on our computers and upload them into our R environment in the GSA.genesets object called “genesets_baderlab_genesets”. The capture.output() function is only there to redirect the printed messages for a clearer notebook. capt_output &lt;- capture.output(genesets_baderlab_genesets &lt;- GSA.read.gmt(filename = dest_gmt_file)) names(genesets_baderlab_genesets$genesets) &lt;- genesets_baderlab_genesets$geneset.names Step 8 - Filter Bader lab geneset file The g:Profiler interface only allows for filtering genesets by size only after the analysis is complete. After the analysis is complete means the filtering is happening after Multiple hypothesis testing. Filtering prior to the analysis will generate more robust results because we exclude the uninformative large genesets prior to testing changing the sets that multiple hypothesis filtering will get rid of. Create multiple gmt files with different filtering thresholds - remove * genesets greater than 250 genes * geneset greater than 1000 genes * geneset greater than 10000 genes # Filter geneset GSA object by specified gs size threshold # # Given - # genesets - in GSA object # gs_sizes - list of all the sizes of the genesets found in the genesets # filter_threshold - value to filter the geneset by. # #This function will return a filtered GSA object. We first create the function. # The function returns a filtered genesets in a GSA object filter_genesets &lt;- function(genesets, gs_sizes, filter_threshold) { filtered_genesets &lt;- genesets filtered_genesets$genesets &lt;- genesets$genesets[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.names &lt;- genesets$geneset.names[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.descriptions &lt;- genesets$geneset.descriptions[ which(gs_sizes&lt;filter_threshold)] return(filtered_genesets) } # You can not simply write a list of lists to a file in R. In order # to output the new geneset file you need to convert it ot a data.frame # To do this convert the list of genes to a tab delmiated list in one column # of the dataframe. # format to write out to a file. # # Given - # genesets - in GSA object # This function returns the formatted genesets as data frame format_genesets &lt;- function(genesets) { collapsed_genesets &lt;- data.frame(name=genesets$geneset.names, description= genesets$geneset.description) collapsed_genesets$genes &lt;- unlist(lapply(genesets$genesets, FUN=function(x){ paste(x,collapse = &quot;\\t&quot;) })) return(collapsed_genesets) } The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames #get the geneset sizes gs_sizes_baderlab_sets &lt;- lapply(genesets_baderlab_genesets$genesets, FUN = function(x){ length(x) }) # max 10,000 genesets_baderlab_genesets_max10000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 10000) genesets_baderlab_genesets_max10000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max10000&quot; ) if(!file.exists(genesets_baderlab_genesets_max10000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max10000), file = genesets_baderlab_genesets_max10000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 1,000 genesets_baderlab_genesets_max1000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 1000) genesets_baderlab_genesets_max1000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max1000&quot; ) if(!file.exists(genesets_baderlab_genesets_max1000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max1000), file = genesets_baderlab_genesets_max1000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 250 genesets_baderlab_genesets_max250 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 250) genesets_baderlab_genesets_max250_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max250&quot; ) if(!file.exists(genesets_baderlab_genesets_max250_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max250), file = genesets_baderlab_genesets_max250_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } Step 9 - Upload the gmt files to gprofiler and rerun g:Profiler In order to use your own genesets with g:Profiler you need to upload the the file to g:Profiler server first. The function will return an ID that you need to specify in the organism parameter of the g:Profiler gost function call. It is done by using the upload_GMT_file() function which is included in the gprofiler2 package. Note: it took about 2 minutes to run this chunck of code. custom_gmt_max250 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max250_filename) ## Your custom annotations ID is gp__p6vH_4OEE_xjI. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__p6vH_4OEE_xjI&#39;) custom_gmt_max1000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max1000_filename) ## Your custom annotations ID is gp__YeTY_zyq3_hfw. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__YeTY_zyq3_hfw&#39;) custom_gmt_max10000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max10000_filename) ## Your custom annotations ID is gp__ss7P_soyc_K34. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__ss7P_soyc_K34&#39;) For this query we are specifying - query - the set of genes of interest, as loaded in from the gene set file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to FALSE (but you can try setting it to true as well because for this set of genes they are ordered in order of their significance) correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to the custom_gmt ID ( for this run it is - custom_gmt_max250) that we received when we uploaded our genetset file. gprofiler_results_custom_max250 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max250 ) ## Detected custom GMT source request gprofiler_results_custom_max1000 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max1000 ) ## Detected custom GMT source request gprofiler_results_custom_max10000 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max10000 ) ## Detected custom GMT source request #get the gprofiler results table enrichment_results_customgmt_max250 &lt;- gprofiler_results_custom_max250$result enrichment_results_customgmt_max1000 &lt;- gprofiler_results_custom_max1000$result enrichment_results_customgmt_max10000 &lt;- gprofiler_results_custom_max10000$result enrichment_results_customgmt_max250[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 6.957366e-21 71 108 18 ## 2 query_1 TRUE 3.993837e-20 65 108 17 ## 3 query_1 TRUE 2.921653e-16 54 108 14 ## 4 query_1 TRUE 1.861155e-15 99 108 16 ## 5 query_1 TRUE 7.455524e-15 133 108 17 ## precision recall ## 1 0.1666667 0.2535211 ## 2 0.1574074 0.2615385 ## 3 0.1296296 0.2592593 ## 4 0.1481481 0.1616162 ## 5 0.1574074 0.1278195 ## term_id ## 1 GLIOBLASTOMA SIGNALING%WIKIPATHWAYS_20250410%WP2261%HOMO SAPIENS ## 2 HEAD AND NECK SQUAMOUS CELL CARCINOMA%WIKIPATHWAYS_20250410%WP4674%HOMO SAPIENS ## 3 PATHWAYS AFFECTED IN ADENOID CYSTIC CARCINOMA%WIKIPATHWAYS_20250410%WP3651%HOMO SAPIENS ## 4 CELL CYCLE%WIKIPATHWAYS_20250410%WP179%HOMO SAPIENS ## 5 INTEGRATED BREAST CANCER PATHWAY%WIKIPATHWAYS_20250410%WP1984%HOMO SAPIENS ## source ## 1 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 2 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 3 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 4 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 5 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## term_name effective_domain_size ## 1 Glioblastoma signaling 16997 ## 2 Head and neck squamous cell carcinoma 16997 ## 3 Pathways affected in adenoid cystic carcinoma 16997 ## 4 Cell cycle 16997 ## 5 Integrated breast cancer pathway 16997 ## source_order parents ## 1 5826 NULL ## 2 5060 NULL ## 3 5126 NULL ## 4 5076 NULL ## 5 5610 NULL Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) # filer by params defined above enrichment_results_customgmt_max250$p_value &lt;- formatC(enrichment_results_customgmt_max250$p_value, format = &quot;e&quot;, digits = 2) enrichment_results_customgmt_max250 = enrichment_results_customgmt_max250[ order(enrichment_results_customgmt_max250$p_value), c(&quot;term_id&quot;, &quot;term_name&quot;, &quot;term_size&quot;, &quot;query_size&quot;, &quot;intersection_size&quot;, &quot;p_value&quot;)] kable(head(enrichment_results_customgmt_max250, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 5: Table 6: Enrichment Result term_id term_name term_size query_size intersection_size p_value 1078 SUMOYLATION OF TRANSCRIPTION COFACTORS%REACTOME%R-HSA-3899300.7 SUMOylation of transcription cofactors 42 108 3 1.00e-02 1079 PID_FOXO_PATHWAY%MSIGDB_C2%PID_FOXO_PATHWAY PID_FOXO_PATHWAY 42 108 3 1.00e-02 1080 IL26 SIGNALING%WIKIPATHWAYS_20250410%WP5347%HOMO SAPIENS IL26 signaling 42 108 3 1.00e-02 1081 GASTRULATION%GOBP%GO:0007369 gastrulation 88 108 4 1.00e-02 1082 SYNAPTIC SIGNALING ASSOCIATED WITH AUTISM SPECTRUM DISORDER%WIKIPATHWAYS_20250410%WP4539%HOMO SAPIENS Synaptic signaling associated with autism spectrum disorder 42 108 3 1.00e-02 1083 CENTRAL NERVOUS SYSTEM NEURON DEVELOPMENT%GOBP%GO:0021954 central nervous system neuron development 42 108 3 1.00e-02 1084 NEGATIVE REGULATION OF PROTEIN DEPOLYMERIZATION%GOBP%GO:1901880 negative regulation of protein depolymerization 42 108 3 1.00e-02 1085 MACROPHAGE STIMULATING PROTEIN MSP SIGNALING%WIKIPATHWAYS_20250410%WP5353%HOMO SAPIENS Macrophage stimulating protein MSP signaling 88 108 4 1.00e-02 163 RETINOBLASTOMA GENE IN CANCER%WIKIPATHWAYS_20250410%WP2446%HOMO SAPIENS Retinoblastoma gene in cancer 72 108 7 1.00e-05 164 WNT BETA CATENIN SIGNALING IN LEUKEMIA%WIKIPATHWAYS_20250410%WP3658%HOMO SAPIENS Wnt beta catenin signaling in leukemia 24 108 5 1.00e-05 165 BIOCARTA_RACCYCD_PATHWAY%MSIGDB_C2%BIOCARTA_RACCYCD_PATHWAY BIOCARTA_RACCYCD_PATHWAY 24 108 5 1.00e-05 166 TRANSCRIPTIONAL REGULATION BY RUNX1%REACTOME DATABASE ID RELEASE 92%8878171 Transcriptional regulation by RUNX1 190 108 10 1.00e-05 514 MYELOID CELL DIFFERENTIATION%GOBP%GO:0030099 myeloid cell differentiation 172 108 7 1.01e-03 515 KIDNEY MORPHOGENESIS%GOBP%GO:0060993 kidney morphogenesis 40 108 4 1.02e-03 516 NEGATIVE REGULATION OF CELL PROLIFERATION INVOLVED IN HEART MORPHOGENESIS%GOBP%GO:2000137 negative regulation of cell proliferation involved in heart morphogenesis 3 108 2 1.02e-03 517 PROSTATE GLAND EPITHELIUM MORPHOGENESIS%GOBP%GO:0060740 prostate gland epithelium morphogenesis 3 108 2 1.02e-03 518 LOSS OF FUNCTION OF SMAD4 IN CANCER%REACTOME DATABASE ID RELEASE 92%3304347 Loss of Function of SMAD4 in Cancer 3 108 2 1.02e-03 519 PRESYNAPTIC PHASE OF HOMOLOGOUS DNA PAIRING AND STRAND EXCHANGE%REACTOME%R-HSA-5693616.6 Presynaptic phase of homologous DNA pairing and strand exchange 40 108 4 1.02e-03 520 NEGATIVE REGULATION OF MAMMARY GLAND EPITHELIAL CELL PROLIFERATION%GOBP%GO:0033600 negative regulation of mammary gland epithelial cell proliferation 3 108 2 1.02e-03 521 REGULATION OF CELL PROLIFERATION INVOLVED IN HEART VALVE MORPHOGENESIS%GOBP%GO:0003250 regulation of cell proliferation involved in heart valve morphogenesis 3 108 2 1.02e-03 #kable(tail(enrichment_results_customgmt_max250, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% #kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) ##YOUR TURN## ## Display the top tables for the gprofiler_results_custom_max1000 and enrichment_results_customgmt_max10000 results Exercise 2 - visualization We will use clusterProfiler style visualization. ### Step 1 - Bar plot ##Calculate a score enrichment_results_customgmt_max250$score = -log10(as.numeric(enrichment_results_customgmt_max250$p_value)) enrichmentTidy &lt;- enrichment_results_customgmt_max250 %&gt;% as_tibble() %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTidy, aes(reorder(term_name, score), score)) + geom_col(aes(fill = score), width=0.8) + scale_fill_gradient(low = &quot;#C1F6F8&quot;, high = &quot;#00BFC4&quot;)+ coord_flip() + labs(x=&quot;&quot;, y=&quot;Normalized Enrichment Score&quot;, title=&quot;Pathway enrichment analysis &quot;) + theme_minimal() p Step 2 - Dot plot with segment enrichmentTop20 &lt;- enrichmentTidy %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTop20, aes( y = fct_reorder(term_name, score), x = score, color = score, size = score )) + geom_point() + scale_color_gradientn( colours = c(&quot;#56A443&quot;, &quot;#8AA443&quot;, &quot;#f7ca64&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = FALSE, order = 1) ) + scale_size_continuous(range = c(4, 8)) + theme_bw(base_size = 12) + xlab(&quot;score -log10(adj pvalue)&quot;) + ylab(NULL) + ggtitle(&quot;Pathway Enrichment Analysis&quot;) + theme( axis.text.y = element_text(size = 10) ) p Step 3 - Ridge plot enrichmentTop20 &lt;- enrichmentTidy %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) # Expand each term to have multiple x values ridge_data &lt;- enrichmentTop20 %&gt;% rowwise() %&gt;% mutate(x_vals = list(seq(-1, 1, length.out = 100))) %&gt;% unnest(x_vals) p = ggplot(ridge_data, aes( x = x_vals, y = fct_reorder(term_name, score), height = score, group = term_name, fill = score )) + geom_density_ridges( stat = &quot;identity&quot;, scale = 0.9, rel_min_height = 0.01, color = &quot;white&quot;, alpha = 0.9 ) + scale_fill_gradientn( colours = c(&quot;#E6194B&quot;, &quot;#3CB44B&quot;, &quot;#4363D8&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(title = &quot;-log10(p-value)&quot;) ) + theme_ridges(font_size = 12, grid = TRUE) + xlim(-1.2, 1.2) + xlab(&quot;&quot;) + ylab(NULL) + ggtitle(&quot;Pathway enrichment analysis&quot;) p = p + theme_minimal(base_size = 12) p Step 4 - Network visualization - EnrichmentMap Get names of genes in the overlap for each pathway Create the enrichment map # Create your data frame df = formatted_results_sel[1:10,] # Step 2: Convert gene strings into lists df$gene_list &lt;- strsplit(df$genes, &quot;,&quot;) # Create edges based on shared genes edges &lt;- data.frame(from = character(), to = character(), weight = integer(), stringsAsFactors = FALSE) for (i in 1:(nrow(df) - 1)) { for (j in (i + 1):nrow(df)) { genes_i &lt;- df$gene_list[[i]] genes_j &lt;- df$gene_list[[j]] shared_genes &lt;- intersect(genes_i, genes_j) if (length(shared_genes) &gt; 0) { edges &lt;- rbind(edges, data.frame( from = df$term_name[i], to = df$term_name[j], weight = length(shared_genes), stringsAsFactors = FALSE )) } } } # Create igraph object g &lt;- graph_from_data_frame(d = edges, vertices = df$term_name, directed = FALSE) # Plot the graph p = plot( g, vertex.label.cex = 0.8, vertex.label.color = &quot;black&quot;, vertex.size = 30, edge.width = E(g)$weight, edge.color = &quot;gray50&quot;, vertex.color = &quot;skyblue&quot;, layout = layout_with_fr(g) ) "],["gsea-lab.html", "Module 2 lab - fGSEA Introduction Goal of the exercise Data Background Additional information Bonus - Automation.", " Module 2 lab - fGSEA Presenter: Ruth Isserlin Introduction This practical lab contains one exercise. It uses fGSEA to perform a gene-set enrichment analysis. Goal of the exercise Learn how to run fGSEA and explore the results. Data The data used in this exercise is gene expression (transcriptomics) obtained from high-throughput RNA sequencing of Pancreatic Ductal Adenocarcinoma samples (TCGA-PAAD). This cohort has been previously stratified into many different set of subtypes PMID:36765128 with the Moffitt Basal vs Classical subtypes compared to demonstrate the GSEA workflow. How was the data processed? Gene expression from the TCGA Pancreatic Ductal Adenocarcinoma RNASeq cohort was downloaded on 2024-06-06 from Genomic Data Commons using the TCGABiolinks R package. Differential expression for all genes between the Basal and Classical groups was estimated using edgeR. The R code used to generate the data and the rank file used in GSEA is included at the bottom of the document in the Additional information section. Background The goal of this lab is to: Upload the 2 required files into GSEA, Adjust relevant parameters, Run fGSEA, Open and explore the gene-set enrichment results. The 2 required files are: a rank file (.rnk) a pathway definition file (.gmt). Rank File To generate a rank file (.rnk), a score (-log10(pvalue) * sign(logFC)) was calculated from the edgeR differential expression results. A gene that is significantly differentially expressed (i.e associated with a very small pvalue, close to 0) will be assigned a high score.The sign of the logFC indicates if the gene has an expression which is higher in Basel (logFC &gt; 0, the score will have a + sign) or lower in Classical (logFC &lt; 0, the score will have a - sign). It is used to rank the genes from top up-regulated to top down-regulated (all genes have to be included). The rank file is going to be provided for the lab, you don’t need to generate it. How to generate a rank file. Calculation of the score Generation of the rank file Select the gene names and score columns and save the file as tab delimited with the extension .rnk Pathway defintion file The second file that is needed for GSEA is the pathway database, a file with the .gmt extension. The pathway database (.gmt) used for the GSEA analysis was downloaded from http://baderlab.org/GeneSets. This file contains gene-sets obtained from MsigDB-c2 and Hallmarks, NCI, Biocarta, IOB, Netpath, HumanCyc, Reactome, Panther, Pathbank, WikiPathways and the Gene Ontology (GO) databases. You don’t need to perform this step for the exercise, the .gmt file will be given to you. Go to: http://download.baderlab.org/EM_Genesets/ Click on June_01_2024/ Click on Human/ Click on symbol/ Save the Human_GOBP_AllPathways_noPFOCR_no_GO_iea…gmt file on your computer The .gmt is a tab delimited text file which contains one gene-set per row. For each gene-set (row), the first 2 columns contain the name and the description of the gene-set and the remaining columns contain the list of genes included in the gene-set. It is possible to create a custom gene-set using Excel or R. GSEA performs a gene-set enrichment analysis using a modified Kolmogorov-Smirnov statistic. The output result consists of summary tables displaying enrichment statistics for each gene-set (pathway) that has been tested. Start the exercise Before starting this exercise, download the 2 required files: Right click on link below and select “Save Link As…”. Place it in the corresponding module directory of your CBW work directory. Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol.gmt TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk Step1. Load required libraries. # List of required packages required_packages &lt;- c( &quot;tidyverse&quot;, # Data manipulation and visualization &quot;GSA&quot;, # Gene set analysis &quot;RCurl&quot;, # HTTP requests &quot;fgsea&quot;, # fast GSEA &quot;data.table&quot;, # for formatting the results &quot;ggridges&quot; # Ridgeline plots ) # Install any missing packages installed &lt;- rownames(installed.packages()) for (pkg in required_packages) { if (!(pkg %in% installed)) { install.packages(pkg) } } # Load all packages invisible(lapply(required_packages, library, character.only = TRUE)) ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:lubridate&#39;: ## ## hour, isoweek, mday, minute, month, quarter, second, wday, week, ## yday, year ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose Step 2. Set up parameters need for the analysis. # defined in the paramters at top of notebook #directory where all the data files are found. working_dir &lt;- &quot;./data/&quot; #directory where all the data files are found. output_dir &lt;- &quot;./generated_data/&quot; if(!exists(output_dir)){ dir.create(output_dir) } ## Warning in dir.create(output_dir): &#39;./generated_data&#39; already exists #The name to give the analysis in GSEA - for example analysis_name &lt;- &quot;Basal_vs_Classical&quot; #rank file to use in GSEA analysis. rnk_file &lt;- &quot;TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk&quot; #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = &quot;&quot; Step 3. Download the latest pathway definition file Only Human, Mouse, Rat, and Woodchuck gene set files are currently available on the baderlab downloads site. If you are working with a species other than human (and it is either rat,mouse or woodchuck) change the gmt_url below to the correct species. Check here to see all available species. if(dest_gmt_file == &quot;&quot;){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include terms # inferred from electronic annotations(IEA) #start with gmt file that has pathways only and GO Biological Process only. rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(output_dir,gmt_file ) #check if this gmt file already exists if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } }else { file.copy(dest_gmt_file,to = output_dir) } Load your gmt file capture.output(all_gs &lt;- GSA.read.gmt(dest_gmt_file) ,file=&quot;gsa_load.out&quot;) names(all_gs$genesets) &lt;- all_gs$geneset.names Step 4. Load your Rank file current_ranks &lt;- read.table(file.path(working_dir,rnk_file),header=TRUE,sep = &quot;\\t&quot;) fgsea_ranks &lt;- current_ranks[,2] names(fgsea_ranks) &lt;- current_ranks[,1] current_ranks &lt;- fgsea_ranks #remove duplicated genes duplicated_gene_names &lt;- names(current_ranks)[which(duplicated(names(current_ranks)))] current_ranks &lt;- current_ranks[which(!names(current_ranks) %in% duplicated_gene_names)] current_ranks &lt;- sort(current_ranks,decreasing = TRUE) Step 5. Run fGSEA - Adjust parameters fGSEA] is an R package that runs a fast Gene Set Enrichment Analysis. In the below command the following options have been specified: pathways - list of genesets to use for the calculation stats - genes and their associated statistic, sorted max_size - maximum size for individual gene sets. In GSEA interface this is set to 500 but we prefer to use a more stringent setting of 200. min_size - minimum size for individual gene sets gseaParam - GSEA parameter value gseaParam - GSEA parameter value. All ranks will be raised to this power when calculating the ES scores. Equivalent to the weight in the original GSEA algorithm. current_fgsea_results &lt;- fgsea::fgsea(all_gs$genesets, current_ranks, minSize=15, maxSize = 500 ) Set gseaParam to 2 if you want to add more weight on the most top up-regulated and top down-regulated. 2 is a more stringent parameter and it will result in less gene-sets significant under FDR &lt;0.05. Step 6. Examining the results Get the top results and visualize as table topPathwaysUp &lt;- current_fgsea_results[ES &gt; 0][head(order(pval), n=10), pathway] topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=10), pathway] topPathways &lt;- c(topPathwaysUp, rev(topPathwaysDown)) plotGseaTable(all_gs$genesets[topPathways], current_ranks, current_fgsea_results, gseaParam=0.5) When examining the results there are a few things to look for: Check the number of gene-sets that have been used for the analysis. A small number (a few hundred genesets if using baderlab genesets) could indicate an issue with identifier mapping. Check the number of sets that have FDR less than 0.25 – in order to determine what thresholds to start with when creating the enrichment map. It is not uncommon to see a thousand gene sets pass the threshold of FDR less than 0.25. FDR less than 0.25 is a very lax threshold and for robust data we can set thresholds of FDR less than 0.05 or lower. Number of pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05)) ## [1] 459 Number of pathways with corrected pvalue &lt; 0.01 length(which(current_fgsea_results$padj &lt; 0.01)) ## [1] 213 Number of Basal (up -regulated) pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05 &amp; current_fgsea_results$ES &gt; 0)) ## [1] 366 Number of Classical (down -regulated) pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05 &amp; current_fgsea_results$ES &lt; 0)) ## [1] 93 5e. Explore the tabular format of the results. Basal topPathwaysUp &lt;- current_fgsea_results[ES &gt; 0][head(order(pval), n=5), pathway] top_basal_hits &lt;- current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysUp),] #format the pathway name colum so that it is easier to see the whole table top_basal_hits$pathway &lt;- substr(top_basal_hits$pathway, start = 1, stop=25) top_basal_hits ## pathway pval padj log2err ES ## &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; ## 1: CELL CYCLE CHECKPOINTS%RE 3.015287e-10 2.356070e-07 0.8140358 0.5400523 ## 2: CELL CYCLE, MITOTIC%REACT 2.415773e-16 7.550499e-13 1.0376962 0.5211659 ## 3: HALLMARK_EPITHELIAL_MESEN 1.353353e-16 7.550499e-13 1.0476265 0.6962643 ## 4: KERATINIZATION%REACTOME%R 2.212670e-10 2.178571e-07 0.8266573 0.8141973 ## 5: SKIN DEVELOPMENT%GOBP%GO: 2.439609e-10 2.178571e-07 0.8140358 0.7078168 ## NES size leadingEdge ## &lt;num&gt; &lt;int&gt; &lt;list&gt; ## 1: 1.997942 243 PSMD2,MCM4,CENPH,KIF18A,MCM7,CHEK1,... ## 2: 2.038142 469 PSMD2,MCM4,CCND1,FOXM1,TUBB,NUP93,... ## 3: 2.459937 156 SNAI2,TGFBI,LAMC2,CDH2,NT5E,FSTL3,... ## 4: 2.389030 47 KRT6A,KRT5,KRT81,KRT14,KRT13,KRT7,... ## 5: 2.299659 87 KRT6A,ANXA1,KRT5,KRT81,TP63,KRT7,... Classical topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=5), pathway] top_classical_hits &lt;- current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysDown),] #format the pathway name colum so that it is easier to see the whole table top_classical_hits$pathway &lt;- substr(top_classical_hits$pathway, start = 1, stop=25) top_classical_hits ## pathway pval padj log2err ES ## &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; ## 1: BIOLOGICAL OXIDATIONS%REA 1.970798e-10 2.178571e-07 0.8266573 -0.6362964 ## 2: CARBOXYLIC ACID METABOLIC 4.268676e-08 1.201526e-05 0.7195128 -0.4563033 ## 3: CELLULAR RESPIRATION%GOBP 1.444767e-08 5.879109e-06 0.7477397 -0.6108973 ## 4: CELLULAR RESPONSE TO XENO 1.081606e-10 1.690279e-07 0.8390889 -0.7080315 ## 5: XENOBIOTIC METABOLIC PROC 5.064558e-11 1.055285e-07 0.8513391 -0.7533267 ## NES size leadingEdge ## &lt;num&gt; &lt;int&gt; &lt;list&gt; ## 1: -2.087654 148 CYP2S1,ALDH2,ACSS1,ADH1C,AOC1,AKR7A3,... ## 2: -1.690261 490 ALDOB,CYP2S1,PLA2G10,ABHD3,CPS1,LPIN1,... ## 3: -1.965509 135 BLOC1S1,COA6,PPARGC1A,FH,ATP5ME,SUCLG1,... ## 4: -2.206002 97 FMO5,HNF4A,CYP2S1,ALDH2,NR1I2,CES2,... ## 5: -2.258234 78 FMO5,HNF4A,CYP2S1,ALDH2,NR1I2,CES2,... Step 7 Visualize the top results as different sorts of plots, as demonstrated in the first part of the lab. Bar plots top pathways associated with classical topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=20), pathway] enrichment_results_topdown &lt;-current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysDown),] #change the name to be just the first part of the name enrichment_results_topdown$pathway &lt;- unlist(lapply(enrichment_results_topdown$pathway, FUN=function(x){unlist(strsplit(x,split = &quot;%&quot;))[1]})) ##Calculate a score enrichment_results_topdown$score = -log10(as.numeric(enrichment_results_topdown$pval)) enrichmentTidy &lt;- enrichment_results_topdown %&gt;% as_tibble() %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTidy, aes(reorder(pathway, score), score)) + geom_col(aes(fill = score), width=0.8) + scale_fill_gradient(low = &quot;#C1F6F8&quot;, high = &quot;#00BFC4&quot;)+ coord_flip() + labs(x=&quot;&quot;, y=&quot;Normalized Enrichment Score&quot;, title=&quot;Pathway enrichment analysis - \\nClassical PDAC&quot;) + theme_minimal() p ##YOUR TURN## ## Generate the same bar plot for the top 20 Basal results. ## Change the colour of the bars to a different colour as they are a different phecotype from the Classical set. Dot plot top pathways associated with classical p = ggplot(enrichment_results_topdown, aes( y = fct_reorder(pathway, score), x = score, color = score, size = score )) + geom_point() + scale_color_gradientn( colours = c(&quot;lightpink&quot;, &quot;lightblue&quot;, &quot;blue&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = FALSE, order = 1) ) + scale_size_continuous(range = c(4, 8)) + theme_bw(base_size = 12) + xlab(&quot;score -log10(adj pvalue)&quot;) + ylab(NULL) + ggtitle(&quot;Pathway Enrichment Analysis - \\n Classical PDAC&quot;) + theme( axis.text.y = element_text(size = 7) ) p Ridge plots top pathways associated with either class # Filter top pathways, e.g., by adjusted p-value topPathways &lt;- current_fgsea_results[padj &lt; 0.05][order(padj)][1:10] # Create a data.frame for plotting with the gene ranks for each of the top pathways ridge_data &lt;- rbindlist(lapply(topPathways$pathway, function(pw) { genes &lt;- all_gs$genesets[[pw]] data.frame( gene = genes, stat = current_ranks[genes], pathway = pw ) })) # get NES for each of the top pathways nes_map &lt;- setNames(topPathways$NES, topPathways$pathway) # Add NES values to ridge_data ridge_data$NES &lt;- nes_map[ridge_data$pathway] #change the name to be just the first part of the name (because the actual names are too long) ridge_data$pathway &lt;- unlist(lapply(ridge_data$pathway, FUN=function(x){unlist(strsplit(x,split = &quot;%&quot;))[1]})) #get rid of na values for genes found in the gene set but not ranked in our dataset. ridge_data &lt;- ridge_data[!is.na(ridge_data$stat),] ggplot(ridge_data, aes(x = stat, y = reorder(pathway, NES), fill = NES)) + geom_density_ridges(scale = 2, alpha = 0.8) + scale_fill_gradient2( low = &quot;blue&quot;, mid = &quot;white&quot;, high = &quot;red&quot;, midpoint = 0, name = &quot;NES&quot; ) + theme_ridges() + theme(legend.position = &quot;right&quot;,axis.text.y = element_text(size = 6)) + labs( title = &quot;Ridgeplot of Gene Stats\\n for Top Enriched Pathways&quot;, x = &quot;Gene-level Statistic&quot;, y = &quot;Pathway&quot; ) Step 8 Output the results so we can visualize the results with programs like cytoscape. In order to do that we need to format the fGSEA output as a file that would be created by GSEA. Required columns include: * pathway name * pathway description * Details column - found in the GSEA results file but it is not used by Cytoscape * size - gene set size * ES - enrichment score * NES - normalized enrichment score * Pval - empirical p-value * Padj - adjusted p-value * FWER * Rank at max - the rank of the gene when the ES score is at is max/min * leading edge genes - the set of genes that contribute to the enrichment of this set. Create a function to output the properly formatted fgsea result. The Function requires: * current_fgsea_results - fgsea results returned * current_results_dir - directory to the resulting file * current_sample - name to give the file write_sample_fgsea_results&lt;- function(current_fgsea_results, current_results_dir, current_sample){ current_sample &lt;- current_sample current_sample_directory_fullpath &lt;- file.path(current_results_dir, current_sample) if(!dir.exists(current_sample_directory_fullpath)){ dir.create(current_sample_directory_fullpath) } #calculate the rank at max #fgsea returns the leading edge. Just need to extract the highest rank from # set to get the rank at max calculated_rank_at_max &lt;- apply(current_fgsea_results,1,FUN=function(x){ max(which(names(current_ranks) %in% unlist(x[8])))}) fakeenr_current_sample &lt;- cbind(current_fgsea_results$pathway, current_fgsea_results$pathway, &quot;Details&quot;, current_fgsea_results$size, current_fgsea_results$ES, current_fgsea_results$NES, current_fgsea_results$pval, current_fgsea_results$padj, 0, calculated_rank_at_max, apply(current_fgsea_results,1, FUN=function(x){paste(unlist(x[8]),collapse=&quot;,&quot;)})) colnames(fakeenr_current_sample) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;GS details&quot;,&quot;SIZE&quot;,&quot;ES&quot;,&quot;NES&quot;,&quot;pval&quot;,&quot;padj&quot;,&quot;FWER&quot;,&quot;Rank at Max&quot;,&quot;leading edge genes&quot;) fakeenr_filename &lt;- paste0(current_sample, &quot;_fgsea_enr_results.txt&quot;,sep=&quot;&quot;) fakeenr_filename_docker &lt;- file.path(current_sample_directory_fullpath,fakeenr_filename) write.table(fakeenr_current_sample , fakeenr_filename_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;latin1&quot;) # &quot;upload&quot; the files to the host machine and replace each path with the host machine path #create a fake expression file fakeexp &lt;- data.frame(name = names(current_ranks), description = names(current_ranks),current_ranks) fakeexp_filename &lt;- paste0(current_sample,&quot;fakeexpression.txt&quot;,sep=&quot;&quot;) fakeexp_name_docker &lt;- file.path( current_sample_directory_fullpath,fakeexp_filename) write.table(fakeexp, fakeexp_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) #create a rank expression file fakernk &lt;- data.frame(name = names(current_ranks), current_ranks) fakernk_filename &lt;- paste0(current_sample,&quot;fakeranks.rnk&quot;,sep=&quot;&quot;) fakernk_name_docker &lt;- file.path( current_sample_directory_fullpath,fakernk_filename) write.table(fakernk, fakernk_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) } #write out the fgsea results for this patient write_sample_fgsea_results(current_fgsea_results,output_dir,analysis_name) ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion ## Warning in write.table(fakeenr_current_sample, fakeenr_filename_docker, : ## invalid char string in output conversion Link to information about GSEA results Additional information More on GSEA data format More on processing the RNAseq using EdgeR and generate the .rank file More on which .gmt file to download from the Baderlab gene-set file, select current release, Human, symbol, Human_GOBP_AllPathways_no_GO_iea_….gmt More on GSEA : link to the Baderlab wiki page on GSEA Bonus - Automation. Run analysis directly from R for easy integration into existing pipelines. Instead of using the GSEA application you can run it directly from R using the GSEA java jar that can be easily used within the workshop docker image (workshop_base_image) that you setup duing your prework. Follow the step by step instructions on how to run from R here - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/run-gsea-from-within-r.html First, make sure your environment is set up correctly by following there instructions - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/setup.html "],["module-3-network-visualization-and-analysis-with-cytoscape.html", "Module 3: Network Visualization and Analysis with Cytoscape", " Module 3: Network Visualization and Analysis with Cytoscape Ruth Isserlin Module 3 Cytoscape Cytoscape - Lecture Module 3 Cytoscape Lab Introduction to practical Cytoscape Lab (slides) Lab practical Cytoscape Primer Module 3 Enrichment Map Enrichment Map Lecture Module 3 Enrichment Map Lab Introduction to practical EM Lab (slides) Lab practical part 1 (g:Profiler) Lab practical part 2 (GSEA) "],["cytoscape_mod3.html", "Module 3 Lab Primer: Cytoscape Primer Goal of the exercise Data Start the exercise Exercise 1a - Create Network from table Exercise 1b - Load node attributes Exercise 1c - Map node attributes to Visual Style Exercise 2 - Work with larger networks Exercise 3 - Perform basic enrichment analysis using EnrichmentTable Exercise 3B - create Enrichment Map and Enhanced graphics nodes from EnrichmentTable Exercise 4 - Load network from NDex", " Module 3 Lab Primer: Cytoscape Primer This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. By Gary Bader, Ruth Isserlin, Chaitra Sarathy, Veronique Voisin Goal of the exercise Create a network and customize it. The goal of this exercise is to learn how to create a network in Cytoscape and customize id. In this example, the proteins are the entities represented as nodes in the network and known physical interactions are the connections between the proteins that are represented as edges. We will overlay 2 additional pieces of information about these proteins, mutation information per protein as node color and mutation expression as node size. Data The data used in this exercise is a set of protein - protein interactions and associated attributes. Start the exercise To start the lab practical section, first create a cytoscape_primer_files directoty on your computer and download the files below. Right click on link below and select “Save Link As…”. Place it in the corresponding module directory of your CBW work directory. Two files are needed for this exercise: networktable.txt nodeattribute.txt Exercise 1a - Create Network from table Launch Cytoscape Locate the top menu bar and select File,–&gt; Import, –&gt; Network from File…. Browse your computer and select the file networktable.txt An Import Network from Table dialog box opens. The 3 columns of the table should be set as “source”, “interaction” and “target” respectively. Cytoscape will assume, by default, will look for the column names that start with “source”, “interaction” and “target”. It will assume that any other column is an interaction attribute (edge attribute) This is just an example file. You can import files with any number of additional columns and choose to ignore all columns except for the ones that you want to import or import all of them. Although Cytoscape tries to guess the data type of each column and the type (ie. is it an attribute associated with source node, target nodes or the interaction) you are able to fine tune everything. Click “Ok”. A network containing the proteins as blue square nodes and interaction as edges should be displayed in the main Cytoscape window. Exercise 1b - Load node attributes Locate the Cytoscape top menu bar and select File,–&gt; Import,–&gt; Table from File…. Browse your computer and select the file nodeattribute.txt click “Open”. An “Import Table from Columns” dialog appears. Click on “OK”. You should be able to see the imported attributes in the node table. The key column is assumed to be the first column in your table. The key is the column in the loaded attribute file used to match your attributes to your network. key colum for Network is the column in the Network that the key is matched to. (In this network there isn’t the ability to set this value because that is the only attribute associated with the nodes in our network but normally this drop box will be selectable) The key and matching column need to match perfectly (unless you have specifid that case does not matter). Similiar to the Import Network from Table, everything about the import is customizable. Cytoscape does its best to guess the datatypes of each column but you are able to fine tune it. There are also advanced options if you want to: change the file delimiter skip lines specify the header column Exercise 1c - Map node attributes to Visual Style Go to “Control Panel” on the left side and select the “Style” tab. Make sure that you are in the “Node” tab. Select the “Fill Color” field expand it by clicking on the right arrow. Set “Column” to “expression” and “Mapping Type” to “Continuous Mapping”. This will change the colours of the nodes to the default colour coding. Double click on the continuos mapping colour box to manually adjust the colour and other settings. At the bottom of the “Style” tab, check the box “Lock node width and height”. Select the “Size” field and expand it by clicking on the right arrow. Set “Column” to “mutation” and “Mapping Type” to “Continuous Mapping”. Your resulting network maps expression to the colour of the node and the size of the node to the number of mutations. Adjust the setting on the colour mapping. Change the colour scheme. Change the maximum and minimum values. Adjust the setting on the size mapping. Make the nodes bigger with higher values. Eventhough the network is small, play around with the layouts. Exercise 2 - Work with larger networks Cytoscape supplies a few demo networks that you can play around with. When you open cytoscape you are presented with a Start Panel where you can choose to reload a previous session or load in one of the sample networks. You do not need to re-open cytoscape to open the starter panel. Locate the Cytoscape top menu bar and select View,–&gt; Show Starter panel. Double click on the Affinity Purification Network to open it. If you already have a session open then you will recieve a warning that the current session will be lost. Before proceeding make sure your current session is saved. (Click on cancel. Then, File –&gt; Save as) Once the network has loaded you will see a network of protein interactions derived from an affinity purification experiment. Bait proteins are reprsented as pink hexagons and their corresponing prey proteins blue boxes. Using this larger network play around with the different layouts Search for the node “VPR” select all of the prey proteins associated with “VPR” Exercise 3 - Perform basic enrichment analysis using EnrichmentTable In Module 2 we performed detailed enrichment analysis with g:profiler and GSEA. We supplied gene lists and ranked expression sets in order to perform the analysis. What if you want to run a quick enrichment analysis with a given network or a given subset of the network? The easiest way to do this is to use the cytoscape app EnrichmentTable. EnrichmentTable will query g:profiler directly with the given network or subnetwork. Not all of the parameters that are available in the web version can be tweaked from the enrichmentmap table app but it can be an easy way to quickly see enrichment results. We will select the bait protein VPR and all its associated prey proteins to use for an enrichment analysis. Bait Protein - Is the labelled protein in an affinity purification experiment that is pulled down. Prey Protein - are the proteins that are associated with the bait protein when it is pulled down and are assumed to interact with the bait protein. First neighbor - are all the nodes that are directly connected to the given node 1. In the search bar enter “VPR”. Press enter. VPR is now the only highlighted node in the network. In order to select all its associated preys we need to select all the nodes that are connected to VPR, all of VPR’s first neighbours. There are two ways to select the first neighbours: In the top menu bar click on Select –&gt; Nodes –&gt; First neighbors of selected nodes –&gt; undirected Click on the first neighbor button, , in the quick links button set. Click on the “Enrichment Table” in the Table Panel. If the Enrichment Table tab is not in the Table Panel, Open Enrichment Table. Go to: Tools –&gt; Enrichment Table –&gt; Perform Gene Enrichment to launch Enrichment Table Tab. Click on the cog icon in the top right hand corner of the Enrichment Table panel This will bring up a panel with the adjustable settings. There are only 5 adjustable parameters- Organism - This shows a list of organisms that are available on the g:Profiler site. Gene ID column - the column in the current network that you want to use to search g:Profiler with. Ideally this should be a column specifying the Gene Name or other identifier. Multiple testing correction - change to fdr. Adjusted p-value threshold (min 0 max 1) - leave as 0.05. If you are getting too many results you can make this value smaller. Include inferred GO annotations (IEA) - by default the search will exclude inferred from electonic annotation GO terms. If you want to include them, select this option. By default, EnrichmentTable automatically uses all the databases available on the g:Profiler site. There is no way to filter prior to running the analysis. You need to filter the results after the analysis has been run. This will change the results because you end up filtering the results after the multiple correction and the multiple correction is dependent on the number of genesets you are testing with. Filter the EnrichmentTable results to show only GO:BP, Reactome and Wikipathway, similiar to what we used in Module 2. Click on the filter icon in the top left hand corner of the enrichment table results. Next to Select Categories select Gene Ontology Biological Process, Reactome, Wikipathways. To select multiple options click and hold command key on Mac or Shift on Windows. click on OK The EnrichmentTable will update to only include the sets from Gene Ontology Biological Process, Reactome, Wikipathways. Exercise 3B - create Enrichment Map and Enhanced graphics nodes from EnrichmentTable To create an Enrichment Map from the EnrichmentTable results, Click on the EM logo in the top left hand bar in the ErichmentTable Panel. This will bring up an EM options panel with very limited parameter adjustments. You can only change the name of the network and the connectivity threshold. You have already specified the p-value threshold when you originally performed the analysis. If you want to create your network with a more permissive q-value you need to go back to the EnrichmentTable search panel. Click on OK This will create an Enrichment Map in a new network and represents all the Gene Ontology Biological Process, Reactome, Wikipathways terms enriched for the VPR and its prey protein set. Exercise 4 - Load network from NDex NDex is an open-source repository where scientists can store, share, manipulate and publish biological network data. Networks are viewable on the web through their webapp but can also be downloaded directly into cytoscape so you can search, manipulate, integrate and analyze the given network for yourselves. For the purpose of this exercise we are going to load in a network from the publication A protein landscape of Breast Cancer. This publication is associated with multiple networks the the authors of this paper created and shared in NDex - https://www.ndexbio.org/index.html#/networkset/4423340d-e8e3-11eb-b666-0ac135e8bacf Start a new session. File –&gt; Close In the Network Search bar (located at the top of the control panel) make sure that the search provider is set to NDex. It should be set to NDex by default but click on down arrow to see the different data sources you can search for. Later in the workshop we will be using this bar to query GeneMania. Enter MCF7_All_PPI&gt;=0.9 into the search box, Click on the search icon. A search results box will appear. The MCF7_All_PPI&gt;=0.9 network is just one of the networks associated with this publication. Eventhough you are searching for this specific network, other networks associated with the original paper will also show up in the search results as well as others. Click on the green down arrow next to MCF7_All_PPI&gt;=0.9, the network will start to import. Once the network has been loaded, click on Close Dialog Resulting network loaded into cytoccape. Description taken from NDex record Baits are shown as yellow box, and preys as grey circle. Size of each node represents number of patients with alterations in each protein. Dotted line represents the physical protein-protein association (validated in other studies) with high Integrated Association Stringency score. Change the edge width to reflect the number of patients the associations is found in instead of the PPI score. Change the default node colour to blue. "],["gprofiler_mod3.html", "Module 3 Lab: g:profiler Visualization Goal of the exercise Data EnrichmentMap Description of this exercise Start the exercise Exercise 1a - compare different gprofiler geneset size results Exercise 1b - Is specifying the gmt file important? Exercise 1c - create EM from results using Baderlab genesets Exercise 1d (optional) - investigate individual pathways in GeneMANIA or String Bonus - Automation.", " Module 3 Lab: g:profiler Visualization This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. By Gary Bader, Ruth Isserlin, Chaitra Sarathy, Veronique Voisin Goal of the exercise Create an enrichment map and navigate through the network During this exercise, you will learn how to create an enrichment map from gene-set enrichment results. The enrichment results chosen for this exercise are generated using g:Profiler but an enrichment map can be created directly from output from GSEA, g:Profiler, GREAT, BinGo, Enrichr or alternately from any gene-set tool using the generic enrichment results (GEM) format. Data The data used in this exercise is a list of frequently mutated genes that we used in previous exercise. Pathway enrichment analysis has been run using g:Profiler and the results have been downloaded as a GEM format. EnrichmentMap A circle (node) is a gene-set (pathway) enriched in genes that we used as input in g:Profiler (frequently mutated genes). edges (lines) represent genes in common between 2 pathways (nodes). A cluster of nodes represent overlapping and related pathways and may represent a common biological process. Clicking on a node will display the genes included in each pathway. Description of this exercise We will run the saved g:Profiler results (from Module 2 - gprofiler lab) using different parameters. An enrichment map represents the result of enrichment analysis as a network where significantly enriched gene-sets that share a lot of genes in common will form identifiable clusters. The visualization of the results as these biological themes will ease the interpretation of the results. The goal of this exercise is to learn how to: Upload g:Profiler results into Cytoscape EnrichmentMap to create a map. Upload several g:Profiler results at the same time to create one map and learn how to distinguish and compare the results. To compare the differences resulting from the use of different g:Profiler parameters at the enrichment map level. Start the exercise To start the lab practical section, first create a gprofiler_files directory on your computer and download the files below. Right click on link below and select “Save Link As…”. Place it in the corresponding module directory of your CBW work directory. Five files are needed for this exercise: Enrichment result 1: gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000.gem.txt In g:Profiler, the parameters that we used to generate this file were: GO_BP no electronic annotation, Reactome, WikiPathways, Benjamini-Hochberg FDR 0.05 The results were filtered using the Term size slidebar. Only the enriched gene-sets containing more than 3 and less than or equal to 10000 genes per gene-set were included in the result file. Enrichment result 2: gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem.txt In g:Profiler, the parameters that we used were: GO_BP no electronic annotation, Reactome, WikiPathways, Benjamini-HochBerg FDR 0.05. The results were filtered using the Term size slidebar. Only the enriched gene-sets that contain more than 3 and less than or equal to 250 genes per gene-set were included in the result file. Enrichment result 3: gProfiler_hsapiens_Baderlab_max250.gem.txt Pathway database 1: gprofiler_full_hsapiens.name.gmt This file can be downloaded directly or can be been created by concatenating the hsapiens.GO/BP.name.gmt, hsapiens.WP.namt.gmt and the hsapiens.REAC.name.gmt files contained in the g:Profiler gprofiler_hsapiens.name folder. Pathway database 2: Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol_max250.gmt Exercise 1a - compare different gprofiler geneset size results Step 1 Launch Cytoscape and open the EnrichmentMap App 1a. Double click on Cytoscape icon 1b. Open EnrichmentMap App In the Cytoscape top menu bar: Click on Apps -&gt; EnrichmentMap A ‘Create Enrichment Map’ window is now opened. Step 2 Create an enrichment map from 2 datasets and with a gmt file. 2a. In the ‘Create Enrichment Map’ window, drag and drop the 2 enrichment files gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000.gem.txt and gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem.txt. 2b. In the white box, click on “gProfiler_hsapiens_lab2_results_GEM_termmin3_max250 (Generic/gProfiler)” 2c. On the right side, go to the GMT field, click on the 3 radio button (…) and locate the file gprofiler_full_hsapiens.name.gmt that you have saved on your computer to upload it. 2d. In the white box, click on “gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000 (Generic/gProfiler)” 2e. On the right side, go to the GMT field, click on the 3 radio button (…) and locate the file gprofiler_full_hsapiens.name.gmt that you have saved on your computer to upload it. 2f. Locate the FDR q-value cutoff field and set the value to 0.001 2g. Select the Connectivity slide bar to sparse. Intstead of specifying the gmt file for each dataset separately, if all the dataasets in your analysis use the same gmt file, you can specify a common gmt file to be used by all datasets. Click +Add… and select Add Common Files On the right side, go to the GMT file field, click on the 3 radio button (…) and locate the file gprofiler_full_hsapiens.name.gmt that you have saved on your computer to upload it. This can also be done for a shared expression file. 2h. Click on Build. If you have specified common files this info box will appear * Click on Continue to build A status bar should pop up showing progress of the Enrichment map build. There might be multiple messages that appear when you first create an enrichment map. You can choose to silence them if you want (Although the yfiles message will continue to appear every two weeks). * Click on OK * Click on OK Step3: Explore the results: In the EnrichmentMap control panel located at the left: Select the 2 Data Sets (checked by default) Set Chart Data o Color by Data Set Select Publication Ready to remove gene-set label to have a global view of the map. un-select Publication Ready when you explore the map in more detail to see the gene-set names. On the map, a node that is coloured both green and blue is a gene-set that is found in the both of the 2 gProfiler result sets that we have been uploaded. A node that is blue is a gene-set that is found only in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000 . A node that is green is a gene-set that is found only in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max250 . A blue edge represents genes that overlap between gene-sets found in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000. A green edge represents genes that overlap between gene-sets found in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem. We can see clusters of blue nodes. All these nodes contain gene-sets that have more than 250 genes. Explore the detailed view (see below) to see if this cluster corresponds to informative terms. Would you have lost information by filtering gene-sets larger than 250 genes? Explore Detailed results In the Cytoscape menu bar, select ‘View” and ’Show Graphic Details’ to display node labels. Make sure you have unselected “Publication Ready” in the EnrichmentMap control panel. Zoom in to be able to read the labels and navigate the network using the bird eye view (blue rectangle). Select a node and visualize the Table Panel Click on a node For this example the node “Signaling by Notch” has been selected. you can type it in the search bar, quotes are important. When the node is selected, it is highlighted in yellow. In table panel, we can see the genes included in the gene-set. A green colored box indicates that the gene is in the gene-set(pathway) and in our gene list. A gray colored box indicated that the gene is in the gene-set but not in our gene list. Exercise 1b - Is specifying the gmt file important? Create an enrichment map without a gmt file to compare the results with Exercise 1a. Go to Control Panel and select the EnrichmentMap tab. Click on the “+” sign to re-open the Create Enrichment Map window. In the white box, select the “gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem (Generic/gProfiler)” file Locate the GMT field and delete the file name, leaving it blank. In the white box, select the “gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000 (Generic/gProfiler)” file Locate the GMT field and delete the file name , leaving it blank. Use same parameters as in exercise 1a: FDR q-value cutoff of 0.001 and Connectivity to sparse. Click on Build Explore the results: In the EnrichmentMap control panel located at the left: Select the 2 Data Sets (selecteded by default) Set Chart Data o Color by Data Set Select Publication Ready to remove gene-set label to have a global view of the map. Uncheck this box when you explore the map in details to see the gene-set names. On the map, a node that is coloured both green and blue is a gene-set that is found in the both of the 2 gProfiler result sets that we have been uploaded. A node that is blue is a gene-set that is found only in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000 . A node that is green is a gene-set that is found only in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max250 . A blue edge represents genes that overlap between gene-sets found in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max10000. A green edge represents genes that overlap between gene-sets found in the file gProfiler_hsapiens_lab2_results_GEM_termmin3_max250.gem. Conclusion of exercises 1 a and 1b: Loading a gmt file to create an enrichment map from g:Profiler result is optional. However, there are 2 main beneficial aspects to uploading a gmt file: The map will be less condensed and easier to read and interpret. Clicking on a node will display all genes in the gene-set and not only genes included in our query list. Exercise 1c - create EM from results using Baderlab genesets Create an enrichment map from the results of g:Profiler generated using the custom Baderlab gene-set file. To get a map that is easy to read and that does not display too many gene-sets, one option is to focus the analysis on gene-sets (pathways) that contain 250 genes or less. We prefiltered our pathway database prior to upload it into g:Profiler so that FDR is calculated only on these gene-sets (as opposed to exercise 1a where the FDR was calculated on all gene-sets and then some gene-sets &gt; 250 genes were excluded from the result file). For this exercise, we will use: Filtered gmt file: Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol_max250.gmt. We have uploaded this file as a custom gmt file in g:Profiler and run the query. (in Module 2 lab) To create an enrichment map of these results: Go to Control Panel and select the EnrichmentMap tab. Click on the “+” sign to re-open the Create Enrichment Map window. Click on Reset to reset the Enrichment map panel Drag the file that we created in Module 2 lab gProfiler_hsapiens_Baderlab_max250.gem.txt and the filtered gmt file (Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol_max250.gmt into the Datasets box on Enrichment map panel. In the white box, select the “gProfiler_hsapiens_Baderlab_max250.gem.txt (Generic/gProfiler)” file Locate the GMT field and upload the file “Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol_max250.gmt”. Set the FDR q-value cutoff to 0.001 and set the Connectivity slide bar to second level. Explore the results: SAVE YOUR CYTOSCAPE SESSION (.cys) FILE ! Exercise 1d (optional) - investigate individual pathways in GeneMANIA or String Each node in the Enrichment map represents a biological process or pathway. It consists of a collection of genes. Often we want to know how the genes in that group interact. There are many different ways you can investigate the underlying interactions for the given group. Some involve searching online databases and others are directly integrated into cytoscape. GeneMANIA - an integrative database of gene connections including co-expression, protein interactions, genetic interactions, pathways and more. Cytoscape App String - an integrative database of gene connections including co-expression, protein interactions, genetic interactions, pathways and more. Cytoscape App Pathway Commons - a intergrative database of pathways. (There is a beta feature in EM to show your pathway in the painter app, a pathway common web page that overlays your expression data on the given pathway. Still in beta testing and requires expression data to work correctly so won’t work for this example) GeneMANIA Navigate to the enrichment map that you created using the Baderlab genesets Click on Network Tab and navigate to the third network (it should be the third network if you followed the above examples - name: gProfiler_hsapiens_Baderlab_max250_gem) or in the Enrichment map panel in the top drop down select the network named gProfiler_hsapiens_Baderlab_max250_gem In the cytoscape search bar enter “Signaling by Notch” If you can’t see the selected nodes, click on “Fit Selected” to focus on the selected node. Right click on the node “Signaling by Notch” and Select Apps –&gt; Enrichmemt Map - Show in GeneMANIA A GeneMANIA Query Panel will pop up. Select Select genes with expression to reduce the query set to just the genes in the given pathway that was in your original dataset (for example we search for a set of 127 genes in g:profiler but the given pathway has 233 genes associated with it of which only 10 genes are found in our original query set ) Click on OK A GeneMANIA network will show up with the connections between the genes found in your query set and the pathway “Signaling by Notch” We will go more in depth into GeneMANIA in module 5 String Navigate to the enrichment map that you created using the Baderlab genesets Click on Network Tab and navigate to the third network (it should be the third network if you followed the above examples - name: gProfiler_hsapiens_Baderlab_max250_gem) or in the Enrichment map panel in the top drop down select the network named gProfiler_hsapiens_Baderlab_max250_gem In the cytoscape search bar enter “Signaling by Notch” If you can’t see the selected nodes, click on “Fit Selected” to focus on the selected node. Right click on the node “Signaling by Notch” and Select Apps –&gt; Enrichmemt Map - Show in String A String Query Panel will pop up. Select Select genes with expression to reduce the query set to just the genes in the given that pathway that was in your original dataset (for example we search for a set of 127 genes in g:profiler but the given pathway has 233 genes associated with it of which only 10 genes are found in our original query set ) Click on OK A String network will show up with the connections between the genes found in your query set and the pathway “Signaling by Notch” Explore the features and data of each Cytoscape app.What sort of information does each tell you? What is the main difference between the two resulting networks? Bonus - Automation. Run analysis directly from R for easy integration into existing pipelines. Instead of creating an Enrichment map manually through the user interface you can create an enrichment map directly using the RCy3 bioconductor package or through direct rest calls with Cytoscape cyrest. Follow the step by step instructions on how to run from R here - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/create-enrichment-map-from-r-with-gprofiler-results.html First, make sure your environment is set up correctly by following there instructions - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/setup.html "],["gsea_mod3.html", "Module 3 Lab: GSEA Visualization Goal of the exercise: Data Exercise 1 - GSEA output and EnrichmentMap Exercise 2 - Post analysis (add drug target gene-sets to the network) Exercise 3 - Autoannotate the Network Exercise 4 (Optional) - Explore results in GeneMANIA or STRING Bonus - Automation.", " Module 3 Lab: GSEA Visualization This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. By Veronique Voisin, Ruth Isserlin, Gary Bader Goal of the exercise: Exercise 1 - Create an enrichment map and navigate through the network During this exercise, you will learn how to create an EnrichmentMap from gene-set enrichment results. The enrichment tool chosen for this exercise is GSEA but an enrichment map can be created from output from GSEA, g:Profiler, GREAT, BinGo, Enrichr or alternately from any gene-set tool using the generic enrichment results format. Exercise 2 - Post analysis (add drug target gene-sets to the network) As second part of the exercise, you will learn how to expand the network by adding an extra layer of information. Exercise 3 - Autoannotate A last optional exercise guides you through the creation of automatically generated cluster labels to the network. Data The data used in this exercise is gene expression data obtained from high throughput RNA sequencing. The data correspond to Pancreatic Ductal Adenocarcinoma samples (TCGA-PAAD). We use precomputed results of the GSEA analysis Module 2 lab - gsea to create an enrichment map with the aim to transform the tabular format to a network so we can better visualize the relationships between the significant gene-sets: GSEA outpus an entire directory of files and results. For the purpose of this analysis we only need two tables found in the output directory. The output result tables are: One table (pos) contains all pathways with an enrichment score (significant or not) related to enrichment of the basal category (positive score). (By default called - gsea_report_for_na_pos_#############.tsv) One table (neg) contains all pathways with an enrichment score (significant or not) related to enrichment of the classical category (negative score). (By default called - gsea_report_for_na_neg_#############.tsv) These 2 tables are uploaded using the EnrichmentMap App which will create a network of basal and classical pathways that have a significant score (FDR &lt;= 0.05) for clearer visualization of the results. EnrichmentMap A red circle (node) is a pathway specific of the mesenchymal type. (or pathway with mostly positively ranked genes) A blue circle (node) is a pathway specific of the immunoreactive type. (or pathway with mostly negatively ranked genes) An edge represents genes in common between 2 pathways (nodes). A cluster of nodes represent overlapping and related pathways and may represent a common biological process or theme. Clicking on a node will display the genes included in each pathway. Exercise 1 - GSEA output and EnrichmentMap To start the lab practical section, first download the files. Right click on link below and select “Save Link As…”. Place it in the corresponding module directory of your CBW work directory. 7 Files are needed to create the enrichment map for this exercise (please download these files on your computer or alternately use the GSEA directory created in module 2 lab - gsea for files 1,2,3) : GMT (file containing all pathways and corresponding genes) - Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol.gmt Enrichments 1 (GSEA results for the “pos” basal subtype) - gsea_report_for_na_pos_1717773429384.tsv Enrichments 2 (GSEA results for the “neg” Classical subtype) - gsea_report_for_na_neg_1717773429384.tsv Expression (file containing the RNAseq data for all samples and all genes) - TCGA-PAAD_GDC_BasalvsClassical_normalized_rnaseq.txt Rank file (file that has been used as input to GSEA) - TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk Classes (define which samples are basal and which samples are classical) - TCGA-PAAD_Subtype_Moffitt_BasalvsClassical_RNAseq_classes.cls Drug target database (preselection of 7 drugs and their target genes in the post analysis exercise, http://www.drugbank.ca/) - Human_DrugBank_all_symbol_June_01_2024_selected.gmt Follow the steps described below at your own pace: Step 1 Launch Cytoscape and open EnrichmentMap App 1a. Double click on the Cytoscape icon 1b. Open EnrichmentMap App In the top menu bar: Click on Apps -&gt; EnrichmentMap A ’Create EnrichmentMap window is now opened. Step 2 Create an enrichment map 2a. In the ‘Create EnrichmentMap’ window, add a dataset of the GSEA type by clicking on the ‘+ADD…’ –&gt; ‘+ add data set manually’. 2b. Specify the following parameters and upload the specified files: Name: leave default or a name of your choice like “GSEAmapPAAD_Basal_vs_Classical” Analysis Type: GSEA Enrichments Pos: gsea_report_for_na_pos_1717773429384.tsv Enrichments Neg: gsea_report_for_na_neg_1717773429384.tsv GMT : Human_GOBP_AllPathways_noPFOCR_no_GO_iea_June_01_2024_symbol.gmt Ranks: TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk Expressions : TCGA-PAAD_GDC_BasalvsClassical_normalized_rnaseq.txt This field is optional but recommended. Classes: TCGA-PAAD_Subtype_Moffitt_BasalvsClassical_RNAseq_classes.cls This field is optional. Phenotypes: In the text boxes place Basal as the Positive phenotype Classical as the Negative phenotype. Basal will be associated with red nodes because it corresponds to the positive phenotype and Classical will be associated with the blue nodes because it corresponds to the negative phenotype. Set FDR q-value cutoff to 0.05 (= only gene-sets significantly enriched at a value of 0.05 or less will be displayed on the map). If the cutoff is set to a very small number, for exaxmple 0.0001, it will be displayed as 1E-04 in the scientific notation. 2c. Click on Build We populated the fields manually. If you work with your own data, a way to populate automatically the fields is to drag and drop your GSEA folder in the ‘Data Set’ window. You are encouraged to give it a try once you finished the lab with your own GSEA results. Unformatted results: layout will be different for each user (there is a random seed in the layout algorithm) but it does not change the results or interpretation (the connections are the same, only the display is different). Step 3 Navigate the enrichment map to gain a better understanding of a EnrichmentMap network. General layout of Cytoscape panel: In addition to the main window where the network is displayed, there are 2 panels: the Control Panel on the left side and the Table Panel at the bottom of the window. Steps: 3a. In the Cytocape menu bar, select View and Always Show Graphic details. It will turn the squared nodes into circles and the gene-set labels will be visible. 3b: Zoom in or out using + or - in toolbar or scroll button on mouse until you are able to read the labels comfortably. 3c: Use the bird’s eye view (located at the bottom of the control panel) to navigate around the network by moving the blue rectangle using the mouse or trackpad. 3d: Click on an individual node of interest. For this example, you could use TGF-BETA RECEPTOR SIGNALING ACTIVATES SMADS. If you are unable to locate TGF-BETA RECEPTOR SIGNALING ACTIVATES SMADS, type “TGF-BETA RECEPTOR SIGNALING ACTIVATES SMADS” in the search box (quotes are important). Selected nodes appear yellow (or highlighted) in the network. 3e. In the Table Panel in the EM Heat map tab change: Expressions: Row Norm Compress: -None- Genes in the heatmap that are highlighted yellow (rank column) represent genes that are part of the leading edge for this gene set, i.e. contributed the most to the enriched phenotype. Leading edge genes will only be highlighted if an individual node has been selected and the Enrichment Map was created from GSEA results. Troubleshooting: if you don’t see the sort column highlighted in yellow, reselect the node of interest and click on the GSEARanking Data Set 1 text in the EM Heatmap tab. Step 4 Use Filters to automatically select nodes on the map: Move the blue nodes to the left side of the window and the red nodes to the right side of the window. 4a. Locate the Filter tab on the side bar of the Control Panel. 4b. Click on the + sign to view the menu and select Column Filter. 4c. From the Choose column … box, select Node: NES(PAAD_Basal_vs_Classical) and set filter values from -2.242 and 0 inclusive. 4d. The blue nodes are now automatically selected. Zoom out to be able to look at the entire network and drag all blue nodes to the left side of the screen. 4e. Optional. Change is to is not to select the red nodes. The red pathways (nodes) are specific to the Basal subtype. They were listed in the pos table of the GSEA results. The enrichment score (ES) values in this table are all positive values. The blue pathways are specific to the Classical subtype and were listed in the neg table of the GSEA results. The ES values in this table are all negative values. This is the information we used as the filtering criteria. Exercise 2 - Post analysis (add drug target gene-sets to the network) Step 5 Add drug target gene-sets to the network (Add Signature Gene-Sets…). 5a. In Control Panel, go to the EnrichmentMap tab and click on “Options…” located above the ‘Data Sets:’ box. Select “Add Signature Gene Sets…”. A window named “EnrichmentMap: Add Signature Gene Sets (Post-Analysis) is now opened. 5b. Using the ‘Load from File…’ button, select the Human_DrugBank_approved_symbol_June_01_2024_selected.gmt file that you saved on your computer. 5c. Click on “Finish”. Two additional nodes are now added to the network and visible as grey diamonds. Dotted orange edges represent their overlap with the nodes of our network. These additional nodes represent gene targets of some approved drugs and these genes are either specific of the basal type (dotted orange edges connected to red nodes) or specific of the classical type (dotted orange edges connected to blue nodes). The remaining five drugs that do not pass the threshold in this map are other drugs currently used in treatment of pancreatic cancer. more info using this link: https://enrichmentmap.readthedocs.io/en/latest/PostAnalysis.html Exercise 3 - Autoannotate the Network Step 6 By default, Enrichment map will Auto-annotate the network with cluster labels. The Apps WordCloud, ClusterMaker and Autoannotate have to be installed. (they should have been installed during the pre-workshop set up) if you ran step 5, delete the drug targets diamond nodes and associated edge before performing step 6: * select the 4 nodes and associated dotted orange edges by browsing the mouse and * click “delete” on your keyboard or * in the Cytoscape menu, ‘Edit’, ‘Delete Selected Nodes and Edges’. Alternately, in the Enrichment Map Input Panel in the Datasets box, un-select “Human_Drugbank_approved_symbol_June_01_2024_selected” to hide the post analysis nodes. The “annotations” are hidden but the node of each computed cluster that has the most significant FDR value is shown with a larger node label. 6a. To modify these precomputed annotations find the Auto annotate display panel on the right or Auto annotate input panel on the left. The right panel will contain all the different settings you can set for the annotations. By default the annotations and their labels are hidden. The left panel allows you to see all the different clusters and their labels. You can select one of many of them, change their labels or recompute the clusters with predefined clusters or one of many avaialble methods amoungst other settings. See the docs for all the available features. Unhide labels and shapes to see the underlying annotation for the network. The network is now subdivided into clusters that are represented by ellipses. Each of these clusters are composed of pathways (nodes) interconnected by many common genes. These pathways represent similar biological processes. The app WordCloud take all the labels of the pathways in one cluster and summarize them as a unique cluster label displayed at the top of each ellipse. Tip 1: further editing and formatting can be performed on the AutoAnnote results using the AutoAnnotate Display in the Results Panels located at the right side of the window. For example, it is possible to change Ellipse to Rectangle, uncheck Scale font by cluster size and increase the Font Scale using the scaling bar. It is also possible to reduce the length of the cluster label by checking the “Word Wrap” option. Tip 2: The AutoAnnotate window on the left side in Result Panel contains the list of all clusters. Clicking on a cluster label will highlight in yellow all nodes in this cluster. It is then easy to move the nodes using the mouse to avoid cluster overlaps. Exercise 4 (Optional) - Explore results in GeneMANIA or STRING Each node in the Enrichment map represents a biological process or pathway. It consists of a collection of genes. Often we want to know how the genes in that group interact. There are many different ways you can investigate the underlying interactions for the given group. Some involve searching online databases and others are directly integrated into cytoscape. GeneMANIA - an integrative database of gene connections including co-expression, protein interactions, genetic interactions, pathways and more. Cytoscape App String - an integrative database of gene connections including co-expression, protein interactions, genetic interactions, pathways and more. Cytoscape App Pathway Commons - a intergrative database of pathways. (There is a beta feature in EM to show your pathway in the painter app, a pathway common web page that overlays your expression data on the given pathway. Still in beta testing and requires expression data to work correctly so won’t work for this example) Step 7 Visualize genes in a pathway/node of interest using the apps STRING and GeneMANIA. This will create a protein-protein interaction network using the genes included in the pathway. Note: We will go more in depth into GeneMANIA in module 5 7a: Click on an individual node of interest. For this example, you could use xenobiotic metabolic process. If you are unable to locate xenobiotic metabolic process, type “xenobiotic metabolic process” in the search box (quotes are important). The selected node appears yellow (or highlighted) in the network. If you have annotated your network, it should be included in the response xenobiotic stimulus cluster. 7b: Right Click on the node of interest to diplay the option menu. Select Apps,–&gt; EnrichmentMap - Show in STRING Patience. :) . It might take a few seconds for the String Protein Query window to open. A STRING Protein Query box appears. Select Select genes with expression. Click on OK. The resulting network will look something like this. Explore the features and data of each Cytoscape app.What happens to the network if you change the initial parameters like Confidence cutoff or Max Additional interactors 7c:Go back to enrichment map network. In Control Panel (left side of the window), select the “Network” tab and click on the Enrichment Map network as shown in below screenshot. 7d: Search again for the node labelled xenobiotic metabolic process (if it is not still selected) as in Step 7a. Right Click on the node of interest to diplay the option menu. Select Apps,–&gt; EnrichmentMap - Show in GeneMANIA A GeneMANIA Query box appears. select Select genes with expression. Click on OK. A pop up will appear indicating that it is currenlty querying GeneMANIA The resulting network will look similiar to the below screenshot. It is possible to view gene expression data for the nodes in the STRING network. See the section https://enrichmentmap.readthedocs.io/en/latest/Integration.html and try it out after the workshop. SAVE YOUR SESSION FILE! Bonus - Automation. Run analysis directly from R for easy integration into existing pipelines. Instead of creating an Enrichment map manually through the user interface you can create an enrichment map directly using the RCy3 bioconductor package or through direct rest calls with Cytoscape cyrest. Follow the step by step instructions on how to run from R here - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/create-enrichment-map-from-r-with-gsea-results.html First, make sure your environment is set up correctly by following there instructions - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/setup.html "],["automation.html", "Module 3 Lab: (Bonus) Automation Goal of the exercise: Set Up - Option 1 - Install R/Rstudio Set Up - Option 2 - Docker image with R/Rstudio Install Docker Create your first notebook using Docker Start using automation Running example notebooks in local RStudio", " Module 3 Lab: (Bonus) Automation This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. By Ruth Isserlin Although a lot of what we have demonstrated in Cytoscape up until now has been manual most of the features we use can be automated through multiple access points including: R/Rstudio using RCy3 - a bioconductor package that makes communicating with cytoscape as simple as calling a method. Python using py2cytoscape. directly through cyrest using rest calls - you can use any programming language with the rest API. See Cytoscape Automation Automation becomes helpful when performing pipelines multiple times on similiar datasets or integrating cytoscape data into your other pipelines. Below we demonstrate how to perform the enrichment map pipeline from R but automation is not limited to this access point. You can automate it from any flavour of programming. Check out all the ways you can interact with Cytoscape here including directly through the cytoscape command window. Goal of the exercise: Run an enrichment analysis and Create an enrichment map automatically from R/Rstudio During this exercise, you will apply what you have learnt in Module 2 labs and Module 3 labs but instead of performing them manually you will automate the process using R/Rstudio. We will use all the same data and programs we used in the previous labs but we will control them from R. Before starting this exercise you need to set up R/Rstudio. You can do that directly on your machine or through docker. Set Up - Option 1 - Install R/Rstudio Install R. Go to: https://cran.rstudio.com/ If installing on Windows select “install R for the first time” to get to the required package. RStudio is a free IDE (Integrated Development Environment) for R. RStudio is a wrapper1 for R and as far as basic R is concerned, all the underlying functions are the same, only the user interface is different (and there are a few additional functions that are very useful e.g. for managing projects). Here is a small list of differences between R and RStudio. pros (some pretty significant ones actually): Integrated version control. Support for “projects” that package scripts and other assets. Syntax-aware code colouring. A consistent interface across all supported platforms. (Base R GUIs are not all the same for e.g. Mac OS X and Windows.) Code autocompletion in the script editor. (Depending on your point of view this can be a help or an annoyance. I used to hate it. After using it for a while I find it useful.) “Function signaturtes” (a list of named parameters) displayed when you hover over a function name. The ability to set breakpoints for debugging in the script editor. Support for knitr, and rmarkdown; also support for R notebooks … (This supports “literate programming” and is actually a big advance in software development) Support for R notebooks. cons (all minor actually): The tiled interface uses more desktop space than the windows of the R GUI. There are sometimes (rarely) situations where R functions do not behave in exactly the same way in RStudio. The supported R version is not always immediately the most recent release. Navigate to the RStudio download Website. Find the right version of the RStudio Desktop installer for your computer, download it and install the software. Open RStudio. Focus on the bottom left pane of the window, this is the “console” pane. Type getwd(). This prints out the path of the current working directory. Make a (mental) note where this is. We usually always need to change this “default directory” to a project directory. Set Up - Option 2 - Docker image with R/Rstudio Changing versions and environments are a continuing struggle with bioinformatics pipelines and computational pipelines in general. An analysis written and performed a year ago might not run or produce the same results when it is run today. Recording package and system versions or not updating certain packages rarely work in the long run. One the best solutions to reproducibility issues is containing your workflow or pipeline in its own coding environment where everything from the operating system, programs and packages are defined and can be built from a set of given instructions. There are many systems that offer this type of control including: Docker. Singularity “A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.” (Merkel 2014) Why are containers great for Bioiformatics? allows you to create environments to run bioinformatis pipelines. create a consistent environment to use for your pipelines. test modifications to the pipeline without disrupting your current set up. Coming back to an analysis years later and there is no need to install older versions of packages or programming languages. Simply create a container and re-run. What is docker? Docker is a container platform, similar to a virtual machine but better. We can run multiple containers on our docker server. A container is an instance of an image. The image is built based on a set of instructions but consists of an operating system, installed programs and packages. (When backing up your computer you might taken an image of it and restored your machine from this image. It the same concept but the image is built based on a set of elementary commands found in your Dockerfile.) - for overview see here Often images are built off of previous images with specific additions you need for you pipeline. (For example, for this course we use a base image supplied by bioconductorrelease 3.11 and comes by default with basic Bioconductor packages but it builds on the base R-docker images called rocker.) Docker - Basic term definition Container An instance of an image. the self-contained running system. There can be multiple containers derived from the same image. Image An image contains the blueprint of a container. In docker, the image is built from a Dockerfile Docker Volumes Anything written on a container will be erased when the container is erased ( or crashes) but anything written on a filesystem that is separate from the contain will persist even after a container is turned off. A volume is a way to assocaited data with a container that will persist even after the container. * maps a drive on the host system to a drive on the container. In the above docker run command (that creates our container) the statement: -v ${PWD}:/home/rstudio/projects maps the directory ${PWD} to the directory /home/rstudio/projects on the container. Anything saved in /home/rstudio/projects will actually be saved in ${PWD} An example: I use the following commmand to create my docker container: docker run -e PASSWORD=changeit --rm \\ -v /Users/risserlin/code:/home/rstudio/projects \\ -p 8787:8787 \\ risserlin/workshop_base_image I create a notebook called task3.Rmd and save it in /home/rstudio/projects. Note: Do not save it in /home/rstudio/ which is the default directory RStudio will start in On my host computer, if I go to /Users/risserlin/code I will find the file task3.Rmd Install Docker Download and install docker desktop. Follow slightly different instructions for Windows or MacOS/Linux Windows it might prompt you to install additional updates (for example - https://docs.Microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package) and require multiple restarts of your system or docker. launch docker desktop app. Open windows Power shell navigate to directory on your system where you plan on keeping all your code. For example: C:\\USERS\\risserlin\\code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v ${PWD}:/home/rstudio/projects -p 8787:8787 \\ risserlin/workshop_base_image Windows defender firewall might pop up with warning. Click on Allow access. In docker desktop you see all containers you are running and easily manage them. MacOS / Linux Open Terminal navigate to directory on your system where you plan on keeping all your code. For example: /Users/risserlin/code Run the following command: (the only difference with the windows command is the way the current directory is written. ${PWD} instead of \"$(pwd)\") docker run -e PASSWORD=changeit --rm \\ -v &quot;$(pwd)&quot;:/home/rstudio/projects -p 8787:8787 \\ risserlin/workshop_base_image Create your first notebook using Docker Start coding! Open a web browser to localhost:8787 enter username: rstudio enter password: changeit changing the parameter -e PASSWORD=changeit in the above docker command will change the password you need to specify When you go to localhost:8787 all you get is: Make sure your docker container is running. (If you rebooted your machine you will need to restart the container on reboot.) Make sure you got the right port. After logging in, you will see an Rstudio window just like when you install it directly on your computer. This RStudio will be running in your docker container and will be a completely separate instance from the one you have installed on your machine (with a different set of packages and potentially versions installed). Make sure that you have mapped a volume on your computer to a volume in your container so that files you create are also saved on your computer. That way, turning off or deleting your container or image will not effect your files. The parameter -v ${PWD}:/home/rstudio/projects maps your current directory (i.e. the directory you are in when launching the container) to the directory /home/rstudio/projects on your container. You do not need to use the ${PWD} convention. You can also specify the exact path of the directory you want to map to your container. Make sure to save all your scripts and notebooks in the projects directory. Create your first notebook in your docker Rstudio. Save it. Find your newly created file on your computer. Start using automation Download example R notebooks from https://github.com/risserlin/CBW_pathways_workshop_R_notebooks. This repository contains example R Notebooks that automate the CBW pipeline. There are two ways you can download this collection: If you are familiar with git then we recommend you fork the repo and use it like you would use any github repo. download the collection as a zip file - unzip folder and place in CBW working directory If you are new to git and want to learn more about code versioning then we recommend you read the following tutorial And check out Github Desktop - a desktop application to communicate with github. Running example notebooks in local RStudio Highly recommended to use docker instead of local RStudio. If you are using local RStudio, versions of R and associated packages may be different than the ones used in the example notebooks and might require installing updated versions and additional packages. Step 1 - launch RStudio Launch RStudio by double clicking on the installed program icon. Step 2 - create a new project Create a new project - File -&gt; New R Project … Select Create project from - “Existing Directory” Click on the Browse button Navigate to the CBW_pathways_workshop_R_notebooks directory that is found in the directory you downloaded and unzipped from github. (for example, if it is still in your downloads directory go to ~/Downloads/Cytoscape_workflows/CBW_pathways_workshop_R_notebooks) Step 3 - Open example RNotebook Open the RNotebook 07-Create_EM_from_GSEA_results.Rmd Go to File –&gt; Open File … Click on 07-Create_EM_from_GSEA_results.Rmd If the file is not found in the first directory that RStudio opens up then go back and make sure that you created an Rproject from an “Existing directory” in the previous step. Step 4 - Step through notebook to run the analysis The RNotebook is a mixture of markdown text and code blocks. Read through the notebook to understand what each section is doing and sequentially run the code blocks by clicking on the play button at the top right of each code block. Run analysis directly from R for easy integration into existing pipelines. Instead of creating an Enrichment map manually through the user interface you can create an enrichment map directly using the RCy3 bioconductor package or through direct rest calls with Cytoscape cyrest. Follow the step by step instructions on how to run from R here - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/create-enrichment-map-from-r-with-gsea-results.html First, make sure your environment is set up correctly by following there instructions - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/setup.html Exercises Once you have run through the notebook and created your enrichment map automatically try the following: change the fdr threshold and create a new network (without rerunning the whole notebook) with the lower FDR threshold. change the similarity coeffecient and create a new network (without rerunning the whole notebook) with the lower FDR threshold. re-run the notebook using the GSEA results you created on the first run without running GSEA. Modify notebook to run with a different gmt file. (Downloaded from somewhere else or a different file found on baderlab genesets download site) Open the notebook Supplementary_Protocol5_Multi_dataset_theme_analysis.Rmd and run through it to create a multi dataset enrichment map. Additional resources Check out all the different notebooks available here Merkel, Dirk. 2014. “Docker: Lightweight Linux Containers for Consistent Development and Deployment.” Linux Journal 2014 (239): 2. References Merkel, Dirk. 2014. “Docker: Lightweight Linux Containers for Consistent Development and Deployment.” Linux Journal 2014 (239): 2. A “wrapper” program uses another program’s functionality in its own context. RStudio is a wrapper for R since it does not duplicate R’s functions, it runs the actual R in the background.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
