[["index.html", "Compute Ontario - Bioinformatics for Pathway Enrichment Analysis ( June 2025 ) Compute Ontario Summer School", " Compute Ontario - Bioinformatics for Pathway Enrichment Analysis ( June 2025 ) Ruth Isserlin, Veronique Voisin last modified 2025-05-30 Compute Ontario Summer School This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. Icons are from the “Very Basic. Android L Lollipop” set by Ivan Boyko licensed under CC BY 3.0 and Icons8. "],["welcome.html", "Welcome Meet your Faculty Pre-Workshop Materials and Laptop Setup Instructions Pre-workshop Tutorials", " Welcome Welcome to Bioinformatics for Pathway Enrichment Analysis - June 2025 Meet your Faculty Veronique Voisin Research Associate, Donnelly Centre for Cellular and Biomolecular Research, University of Toronto Veronique is currently a bioinformatician applying pathway and networks analysis to high throughput genomics data for OICR cancer stem cell program. Previously, she worked on characterizing the gene signatures of different types of leukemias using a murine model     Ruth Isserlin Research data analyst,Donnelly Centre for Cellular and Bimolecular Research, University of Toronto Bioinformatician and data analyst in the Bader lab applying pathway and data analysis to varied data types. Developed Enrichment Map App for Cytoscape, an app to visually translate functional enrichment results from popular enrichment tools like GSEA to networks. Further developed the Enrichment Map Pipeline including development of additional Apps to help summarize and analyze resulting Enrichment Maps, including PostAnalysis, WordCloud, and AutoAnnotate App. Thank you for attending the Bioinformatics for Pathway Enrichment Analysis workshop! Help us make this workshop better by filling out our survey. Pre-Workshop Materials and Laptop Setup Instructions Laptop Setup Instructions A Check list to setup your laptop can be found here Install these tools on your laptop before coming to the workshop: Basic programs A robust text editor: For Windows/PC - notepad++ For Linux - gEdit For Mac – TextWrangler A file decompression tool. For Windows/PC – 7zip. For Linux – gzip. For Mac – already there. A robust internet browser such as: Firefox Safari Chrome Microsoft Edge A PDF Viewer Adobe Acrobat or equivalent Cytoscape Installation Please install the latest version of Cytoscape 3.10.3 or Cytoscape Download as well as a group of Cytoscape Apps that we will be using for different parts of the course. Install Cytoscape 3.10.3: Go to: https://github.com/cytoscape/cytoscape/releases/3.10.3/ OR https://cytoscape.org/download.html Choose the version corresponding to your operating system (OS, Windows or UNIX) Follow instructions to install cytoscape Verify that Cytoscape has been installed correctly by launching the newly installed application Install the following Cytoscape Apps - Apps are installed from within Cytoscape. In order to install Apps launch Cytoscape From the menu bar, select ‘Apps’, then ‘App Store’, then ‘Show App Store’. App Store will appear in left hand Panel Within search bar at the top of the panel, search for the app listed below. Once you click on search icon a web browser will be launched with the apps that match your search. Select the correct app (there might be a few that match your search term). Click on “Install” install the following: EnrichmentMap 3.5.0 EnrichmentMap Pipeline Collection 1.1.0 (it will install ClusterMaker2 v2.3.4, WordCloud v3.1.4 and AutoAnnotate v1.5.0) yFiles Layout Algorithms 1.1.4 RStudio Installation Please install the latest version of RStudio Download R and RStudio Go to the RStudio page Locate the Download page and download the version corresponding to your system MAC users: https://download1.rstudio.org/electron/macos/RStudio-2025.05.0-496.dmg Window users: https://download1.rstudio.org/electron/windows/RStudio-2025.05.0-496.exe Unix users: https://download1.rstudio.org/electron/jammy/amd64/rstudio-2025.05.0-496-amd64.deb Download and install R Download and install RStudio Launch RStudio to test it. Install required packages fGSEA GSA gprofiler2 httr RCurl data.table tidyverse gpplot2 ggridges webshot2 igraph stringr kableExtra knitr glue Pre-workshop Tutorials It is in your best interest to complete these before the workshop. Cytoscape Preparation tutorials Go to : https://github.com/cytoscape/cytoscape-tutorials/wiki and follow : Tour of Cytoscape Basic Data Visualization Pre-workshop Readings and Lectures Video Module 1 - Introduction to Pathway and Network Analysis by Gary Bader Pathway enrichment analysis and visualization of omics data using g:Profiler, GSEA, Cytoscape and EnrichmentMap Reimand J, Isserlin R, Voisin V, Kucera M, Tannus-Lopes C, Rostamianfar A, Wadi L, Meyer M, Wong J, Xu C, Merico D, Bader GD Nat Protoc. 2019 Feb;14(2):482-517 - Available here as well Additional tutorials How to visually interpret biological data using networks Merico D, Gfeller D, Bader GD Nature Biotechnology 2009 Oct 27, 921-924 - Available here as well g:Profiler–a web-based toolset for functional profiling of gene lists from large-scale experiments. Reimand J, Kull M, Peterson H, Hansen J, Vilo J Nucleic Acids Res. 2007 Jul;35 g:Profiler: a web server for functional enrichment analysis and conversions of gene lists (2019 update) Raudvere U, Kolberg L, Kuzmin I, Arak T, Adler P, Peterson H, Vilo J Nucleic Acids Res. 2019 May 8 Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles Subramanian A, Tamayo P, Mootha VK, Mukherjee S, Ebert BL, Gillette MA, Paulovich A, Pomeroy SL, Golub TR, Lander ES, Mesirov JP Proc Natl Acad Sci U S A. 2005 Oct 25;102(43) Interacting with Cytoscape using CyRest and command lines (for advanced users): https://github.com/cytoscape/cytoscape-automation/blob/master/for-scripters/R/advanced-cancer-networks-and-data-rcy3.Rmd "],["intro.html", "Module 1 - Introduction to Pathway and Network Analysis (Gary Bader)", " Module 1 - Introduction to Pathway and Network Analysis (Gary Bader) Lecture Recorded Lecture 1 "],["module-2-finding-over-represented-pathways-veronique-voisin.html", "Module 2: Finding Over-represented Pathways (Veronique Voisin)", " Module 2: Finding Over-represented Pathways (Veronique Voisin) Veronique Voisin and Ruth Isserlin Lecture - Part 1 - Pathway enrichment analysis using a defined gene list Lecture - Part 2 - Pathway enrichment analysis using a ranked gene list Lab practical part 1 (g:Profiler) Lab practical part 2 (fGSEA) "],["gprofiler-lab-new.html", "Module 2 lab - g:Profiler Introduction Goal of the exercise 1 Data Exercise 1 - run g:Profiler Exercise 2 - visualization", " Module 2 lab - g:Profiler This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. This means that you are able to copy, share and modify the work, as long as the result is distributed under the same license. authors: Veronique Voisin and Ruth Isserlin Introduction During this practical lab, we will perform pathway enrichment analysis using a defined gene list. Goal of the exercise 1 For this exercise, our goal is to run pathway enrichment analysis using g:Profiler and explore the results. g:Profiler performs a gene-set enrichment analysis using a hypergeometric test (Fisher’s exact test). The Gene Ontology Biological Process, Reactome and WikiPathways sources are going to be used as pathway databases. g:Profiler can be used using the website at https://biit.cs.ut.ee/gprofiler/gost. However, for this practical lab, we will run it from the g:Profiler R package. We will run the query and explore the table of results and visualize the results as bar and dot plots. One of the greatest features of g:Profiler is that it is updated on a regular basis and most of the previous versions are available online ont the gprofiler archive. The gprofielr2 -g:Profiler R implementation is a wrapper for the web version. You require an internet connection to get enrichment results. Data g:Profiler requires a list of genes: for this, we use genes with frequent somatic SNVs identified in TCGA exome sequencing data of 3,200 tumors of 12 types. The MuSiC cancer driver mutation detection software was used to find 127 cancer driver genes that displayed higher than expected mutation frequencies in cancer samples (Supplementary Table 1, which is derived from column B of Supplementary Table 4 in Kandoth C. et al.. Exercise 1 - run g:Profiler Before starting this exercise, download the required files: Right click on link below and select “Save Link As…”. We recommend saving all these files in a personal project data folder before starting. We also recommend creating an additional result data folder to save the files generated while performing the protocol. Pancancer_genelist.txt Open RStudio and follow script instructions below. Step 1 - Install and Load libraries # CRAN and Bioconductor setup if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) # List of CRAN packages cran_packages &lt;- c( &quot;tidyverse&quot;, &quot;knitr&quot;, &quot;kableExtra&quot;, &quot;glue&quot;, &quot;RCurl&quot;, &quot;webshot2&quot;, &quot;ggridges&quot;, &quot;igraph&quot;, &quot;stringr&quot;, &quot;data.table&quot; ) # List of Bioconductor packages bioc_packages &lt;- c( &quot;gprofiler2&quot;, &quot;GSA&quot;, &quot;fgsea&quot;, &quot;clusterProfiler&quot;, &quot;enrichplot&quot; ) # Install CRAN packages if not already installed for (pkg in cran_packages) { if (!requireNamespace(pkg, quietly = TRUE)) { install.packages(pkg) } } # Install Bioconductor packages if not already installed for (pkg in bioc_packages) { if (!requireNamespace(pkg, quietly = TRUE)) { BiocManager::install(pkg) } } # Load the libraries library(tidyverse) library(knitr) library(kableExtra) library(glue) library(RCurl) library(webshot2) library(ggridges) library(igraph) library(stringr) library(data.table) # Bioconductor packages library(gprofiler2) library(GSA) library(fgsea) library(clusterProfiler) library(enrichplot) Step 2 - Input query Save the gene list (Pancancer_genelist.txt) on your local computer. Remember where you stored it as you need to know the path to the file to start the practical lab. Find path on Windows: Using File Explorer Navigate to the file in File Explorer. Right-click the file and select “Properties”. In the General tab, look for: Location: This shows the folder path. File name: Combine this with the location to get the full path. Example: Location: C:\\Users\\Veronique\\Documents File name: example.txt Full path: C:\\Users\\Veronique\\Documents\\example.txt Find path on a Mac: Using Finder with Right-Click Open Finder and locate the file. Right-click (or Control-click) the file. Hold the Option key — the menu item “Copy [filename] as Pathname” will appear. Click it to copy the full file path. Paste it anywhere (e.g., in a Terminal or text editor) : /Users/veronique/Documents/example.txt ##The first step is to read the file containing the gene list. # For this purpose, we need to know the path to the file = where we stored our file on our computer # Please see my example below: # myfile = &quot;/Users/veronique/Documents/CO_summer_school/Pancancer_genelist.txt&quot; ##!!REPLACE BY YOUR PATH!!## myfile = &quot;./Module2/gprofiler/data/Pancancer_genelist.txt&quot; ##YOUR TURN: create the myfile object using the path to your file / name of the file ## #This function will read the genelist file and import it as a data frame object in our R environment current_genelist &lt;- read.table( file = myfile, header = FALSE, sep = &quot;\\t&quot;, quote = &quot;&quot;, stringsAsFactors = FALSE) #head(current_genelist) #class(current_genelist) #We take the gene list which is stored as the first column of our dataframe and convert it to a character vector for future use query_set &lt;- current_genelist$V1 #class(query_set) Step 3 - Run g:Profiler The next step is to run pathway enrichment analysis using gost g:Profiler using the g:Profiler2 R package. For detailed descriptions of all the parameters that can be specified for the gost g:profiler function see the R package information - here and here. For this query we are specifying - query - the set of genes of interest, as loaded in from the gene list file (query_set). significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its predetermined threshold. We will filter the results for significance in a next step. ordered_query - set to FALSE (because we are not taking into account the order of the list) exclude_iea - set to TRUE. We are removing the electronic inferred annotations from the GO database correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to “hsapiens” for homo sapiens. Organism names are constructed by concatenating the first letter of the name and the family name (according to gprofiler2 documentation) source - the geneset source databases to use for the analysis. We recommend using GO biological process (GO:BP), WikiPathways (WP) and Reactome (Reac) but there are additional sources you can add (GO molecular function or cellular component(GO:MF, GO:CC), KEGG, transcription factors (TF), microRNA targets (MIRNA), corum complexes (CORUM), Human protein atlas (HPA),Human phenotype ontology (HP) ) gprofiler_results &lt;- gost(query = query_set , significant=FALSE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = &quot;hsapiens&quot;, source = c(&quot;REAC&quot;,&quot;WP&quot;,&quot;GO:BP&quot;)) #get the gprofiler results table enrichment_results &lt;- gprofiler_results$result #display the names of all columns colnames(enrichment_results) ## [1] &quot;query&quot; &quot;significant&quot; &quot;p_value&quot; ## [4] &quot;term_size&quot; &quot;query_size&quot; &quot;intersection_size&quot; ## [7] &quot;precision&quot; &quot;recall&quot; &quot;term_id&quot; ## [10] &quot;source&quot; &quot;term_name&quot; &quot;effective_domain_size&quot; ## [13] &quot;source_order&quot; &quot;parents&quot; #display the top rows head(enrichment_results) ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 2.197504e-31 4820 117 99 ## 2 query_1 TRUE 9.219198e-31 5210 117 101 ## 3 query_1 TRUE 1.947743e-28 5688 117 102 ## 4 query_1 TRUE 2.634097e-25 4388 117 89 ## 5 query_1 TRUE 4.567813e-25 3542 117 81 ## 6 query_1 TRUE 1.556961e-24 4278 117 87 ## precision recall term_id source ## 1 0.8461538 0.02053942 GO:0080090 GO:BP ## 2 0.8632479 0.01938580 GO:0060255 GO:BP ## 3 0.8717949 0.01793249 GO:0019222 GO:BP ## 4 0.7606838 0.02028259 GO:0010556 GO:BP ## 5 0.6923077 0.02286844 GO:0019219 GO:BP ## 6 0.7435897 0.02033661 GO:0010468 GO:BP ## term_name ## 1 regulation of primary metabolic process ## 2 regulation of macromolecule metabolic process ## 3 regulation of metabolic process ## 4 regulation of macromolecule biosynthetic process ## 5 regulation of nucleobase-containing compound metabolic process ## 6 regulation of gene expression ## effective_domain_size source_order parents ## 1 16175 17800 GO:00192.... ## 2 16175 14472 GO:00192.... ## 3 16175 5599 GO:00081.... ## 4 16175 4209 GO:00090.... ## 5 16175 5596 GO:00061.... ## 6 16175 4161 GO:00104.... The enrichment_results dataframe contains different columns. Let’s rearrange the table to display the most important information. We will arrange the table so it contains: the database origin, the name of each of the pathway, term size , query size, intersection size and adjusted pvalue. - Term size: number of genes in the pathway as it is in the database Query size: number of genes in our gene list Intersection size: number of genes overlapping between our gene list and the tested pathway pvalue: adjusted pvalue (corrected for multiple hypothesis testing using the Benjamini-Hochberg method) The results are ordered by significance, from the most significant pathway (lowest p-value) to the least significant. enrichment_results$p_value &lt;- formatC(enrichment_results$p_value, format = &quot;e&quot;, digits = 2) enrichment_results = enrichment_results[ , c(&quot;source&quot;, &quot;term_name&quot;, &quot;term_size&quot;, &quot;query_size&quot;, &quot;intersection_size&quot;, &quot;p_value&quot;)] kable(head(enrichment_results, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 1: Table 2: Enrichment Result source term_name term_size query_size intersection_size p_value GO:BP regulation of primary metabolic process 4820 117 99 2.20e-31 GO:BP regulation of macromolecule metabolic process 5210 117 101 9.22e-31 GO:BP regulation of metabolic process 5688 117 102 1.95e-28 GO:BP regulation of macromolecule biosynthetic process 4388 117 89 2.63e-25 GO:BP regulation of nucleobase-containing compound metabolic process 3542 117 81 4.57e-25 GO:BP regulation of gene expression 4278 117 87 1.56e-24 GO:BP regulation of biosynthetic process 4519 117 89 1.56e-24 GO:BP positive regulation of macromolecule metabolic process 2767 117 72 1.99e-24 GO:BP DNA-templated transcription 3142 117 76 1.99e-24 GO:BP regulation of DNA-templated transcription 3003 117 74 5.43e-24 GO:BP regulation of RNA biosynthetic process 3022 117 74 7.44e-24 GO:BP positive regulation of cellular process 4915 117 91 1.12e-23 GO:BP nucleic acid biosynthetic process 3915 117 82 3.02e-23 GO:BP phosphorylation 1132 117 48 6.35e-23 GO:BP regulation of RNA metabolic process 3273 117 75 1.35e-22 GO:BP positive regulation of metabolic process 3045 117 72 4.48e-22 GO:BP positive regulation of biological process 5229 117 91 1.13e-21 GO:BP RNA biosynthetic process 3822 117 79 1.39e-21 GO:BP nucleic acid metabolic process 4503 117 85 1.39e-21 GO:BP protein phosphorylation 1045 117 45 1.39e-21 Step 4 - Explore top table of results For this analysis, we chose to use 3 databases: GO:BP, Reactome and Wikipathways. If we look at the top table only, we are only going to see the results of GO:BP but it is interesting to look at the top results for each of the 3 databunique(enrichment_results$source) ##Get the name of the databases unique(enrichment_results$source) ## [1] &quot;GO:BP&quot; &quot;REAC&quot; &quot;WP&quot; ##Filter the dataframe to retrieve only the Reacome results enrichment_results_Reac &lt;- enrichment_results %&gt;% filter(source == &quot;REAC&quot;) ##Now display the top 20 pathways kable(head(enrichment_results_Reac, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 3: Table 4: Enrichment Result source term_name term_size query_size intersection_size p_value REAC Diseases of signal transduction by growth factor receptors and second messengers 418 107 30 2.42e-15 REAC Disease 1767 107 55 1.52e-14 REAC Gene expression (Transcription) 1519 107 47 1.13e-11 REAC Generic Transcription Pathway 1235 107 42 1.62e-11 REAC RNA Polymerase II Transcription 1356 107 43 6.57e-11 REAC PI3K/AKT Signaling in Cancer 92 107 13 7.33e-10 REAC Signal Transduction 2548 107 57 2.46e-09 REAC ESR-mediated signaling 216 107 17 3.59e-09 REAC Signaling by Nuclear Receptors 290 107 19 4.83e-09 REAC Developmental Biology 1225 107 37 1.27e-08 REAC PIP3 activates AKT signaling 253 107 17 3.15e-08 REAC Cellular responses to stress 792 107 28 1.21e-07 REAC Transcriptional regulation by RUNX3 95 107 11 1.47e-07 REAC Cellular responses to stimuli 806 107 28 1.53e-07 REAC Negative regulation of the PI3K/AKT network 99 107 11 2.00e-07 REAC Signaling by FLT3 ITD and TKD mutants 15 107 6 2.04e-07 REAC Intracellular signaling by second messengers 293 107 17 2.04e-07 REAC Formation of definitive endoderm 15 107 6 2.04e-07 REAC Transcriptional Regulation by TP53 359 107 18 5.33e-07 REAC SUMO E3 ligases SUMOylate target proteins 171 107 13 5.33e-07 ##YOUR TURN## ##DISPLAY THE TOP 20 PATHWAYS FOR THE WIKIPATHWAY DATABASE (&quot;WP&quot;) Step 5 - Filter results by geneset size Restrict the results to just the ones that have at maximum gene-set size of 1000 and a minimum gene-set size of 10 and with an adjusted pvalue of 0.05.- maximum gene-set size of 1000: will remove very generic pathway terms that are less informative like “regulation of gene expression” minimum gene-set size of 10: will remove small pathways where the pvalue is significant athough the overlap size is very small p_thres: aim is to retrieve only pathways that are significant under this adjusted pvalue threshold of 0.05 (5% false positive) min_gs_size = 3 max_gs_size = 1000 p_thres = 0.05 # filer by params defined above # by default we have set the max and min gs size to 250 and 3, respectively. ##the pvalue was stored as a character vector, we have to transform back into a numerical vector to be able to use it to filter values enrichment_results$p_value &lt;- as.numeric(enrichment_results$p_value) enrichment_results_mxgssize_1000_min_10_adjp_0_05 &lt;- subset(enrichment_results, term_size &gt;= min_gs_size &amp; term_size &lt;= max_gs_size &amp; p_value &lt;= p_thres ) # myrows = nrow(enrichment_results_mxgssize_1000_min_10_adjp_0_05) print(glue(&quot;It results in {myrows} selected pathways with maximum gene-set size of {max_gs_size} and minimum gene-set of {min_gs_size} with an adjusted p-value of {p_thres} . &quot;)) ## It results in 2080 selected pathways with maximum gene-set size of 1000 and minimum gene-set of 3 with an adjusted p-value of 0.05 . In a second step, try different thresholds of maximum gene-set size and adjusted pvalue threshold: 500 and 250 for * max_gs_size and 0.01 or 0.001 for pvalue- Option 1 max_gs_size = 500 p_thres = 0.01 or Option 2 max_gs_size = 250 p_thres = 0.001 ##YOUR TURN## ## How many pathways do you get for each option (nrow()): copy your answer in the chat Step 6 - Run g:profiler with your own genesets (example using BaderLab genesets) With regards to pathway sets there are two options when using g:Profiler - Use the genesets that are supplied by g:Profiler as we just did. Upload your own genesets. The most common reasons for supplying your own genesets is the ability to use up to date annotations or in-house annotations that might not be available in the public sphere yet. It can be used to test the enrichment in a particular pathway of interest that might not be in the general pathway database but that you obtained for example by extracting the data from a published paper. You need to format this pathway in a .gmt file. In this example, we will upload the Baderlab gene set file that contains multiple database sources. We will filter the gene-set prior to uploading the gene-set file to g:Profiler. Step 7 - Download and load Bader lab geneset file Download the latest Bader lab genesets The file will be downloaded on your local computer in the workin directory (working_dir) of your choice. dest_gmt_file = &quot;&quot; #flag to trigger download of latest gmt file - change to TRUE # if you want to check the website and download the latest # version instead of using the specified May 01, 2025 version. downlaod_latest_version = FALSE #working_dir = &quot;/Users/veronique/Documents/CO_summer_school&quot; working_dir = file.path(getwd(),&quot;Module2&quot;,&quot;gprofiler&quot;,&quot;data&quot;) ## YOUR TURN: replace working directory by your own path to your working directory ## if((dest_gmt_file == &quot;&quot;) &amp;&amp; downlaod_latest_version){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = RCurl::getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include # terms inferred from electronic annotations(IEA) #start with gmt file that has pathways only rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(working_dir,gmt_file) if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } else if(!downlaod_latest_version){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/May_01_2025/Human/symbol/&quot; gmt_file = &quot;Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol.gmt&quot; #download the specific file specified above dest_gmt_file &lt;- file.path(working_dir,gmt_file) if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } } Load in the GMT file This step will take the gmt file that we just downloaded on our computers and upload them into our R environment in the GSA.genesets object called “genesets_baderlab_genesets”. The capture.output() function is only there to redirect the printed messages for a clearer notebook. capt_output &lt;- capture.output(genesets_baderlab_genesets &lt;- GSA.read.gmt(filename = dest_gmt_file)) names(genesets_baderlab_genesets$genesets) &lt;- genesets_baderlab_genesets$geneset.names Step 8 - Filter Bader lab geneset file The g:Profiler interface only allows for filtering genesets by size only after the analysis is complete. After the analysis is complete means the filtering is happening after Multiple hypothesis testing. Filtering prior to the analysis will generate more robust results because we exclude the uninformative large genesets prior to testing changing the sets that multiple hypothesis filtering will get rid of. Create multiple gmt files with different filtering thresholds - remove * genesets greater than 250 genes * geneset greater than 1000 genes * geneset greater than 10000 genes # Filter geneset GSA object by specified gs size threshold # # Given - # genesets - in GSA object # gs_sizes - list of all the sizes of the genesets found in the genesets # filter_threshold - value to filter the geneset by. # #This function will return a filtered GSA object. We first create the function. # The function returns a filtered genesets in a GSA object filter_genesets &lt;- function(genesets, gs_sizes, filter_threshold) { filtered_genesets &lt;- genesets filtered_genesets$genesets &lt;- genesets$genesets[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.names &lt;- genesets$geneset.names[ which(gs_sizes&lt;filter_threshold)] filtered_genesets$geneset.descriptions &lt;- genesets$geneset.descriptions[ which(gs_sizes&lt;filter_threshold)] return(filtered_genesets) } # You can not simply write a list of lists to a file in R. In order # to output the new geneset file you need to convert it ot a data.frame # To do this convert the list of genes to a tab delmiated list in one column # of the dataframe. # format to write out to a file. # # Given - # genesets - in GSA object # This function returns the formatted genesets as data frame format_genesets &lt;- function(genesets) { collapsed_genesets &lt;- data.frame(name=genesets$geneset.names, description= genesets$geneset.description) collapsed_genesets$genes &lt;- unlist(lapply(genesets$genesets, FUN=function(x){ paste(x,collapse = &quot;\\t&quot;) })) return(collapsed_genesets) } The format of the GMT file is described https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:Gene_Matrix_Transposed_file_format.28.2A.gmt.29 and consists of rows with the following Name Description tab delimited list of genes a part of this geneset Write out the gmt file with genenames #get the geneset sizes gs_sizes_baderlab_sets &lt;- lapply(genesets_baderlab_genesets$genesets, FUN = function(x){ length(x) }) # max 10,000 genesets_baderlab_genesets_max10000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 10000) genesets_baderlab_genesets_max10000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max10000&quot; ) if(!file.exists(genesets_baderlab_genesets_max10000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max10000), file = genesets_baderlab_genesets_max10000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 1,000 genesets_baderlab_genesets_max1000 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 1000) genesets_baderlab_genesets_max1000_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max1000&quot; ) if(!file.exists(genesets_baderlab_genesets_max1000_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max1000), file = genesets_baderlab_genesets_max1000_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } #max gs size of 250 genesets_baderlab_genesets_max250 &lt;- filter_genesets(genesets_baderlab_genesets, gs_sizes_baderlab_sets, 250) genesets_baderlab_genesets_max250_filename &lt;- gsub(x =dest_gmt_file, pattern = &quot;symbol&quot; , replacement = &quot;symbol_max250&quot; ) if(!file.exists(genesets_baderlab_genesets_max250_filename)){ write.table(x = format_genesets(genesets_baderlab_genesets_max250), file = genesets_baderlab_genesets_max250_filename, quote = FALSE,sep = &quot;\\t&quot;,row.names = FALSE, col.names=TRUE) } Step 9 - Upload the gmt files to gprofiler and rerun g:Profiler In order to use your own genesets with g:Profiler you need to upload the the file to g:Profiler server first. The function will return an ID that you need to specify in the organism parameter of the g:Profiler gost function call. It is done by using the upload_GMT_file() function which is included in the gprofiler2 package. Note: it took about 2 minutes to run this chunck of code. custom_gmt_max250 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max250_filename) ## Your custom annotations ID is gp__HaE5_9p7E_cZc. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__HaE5_9p7E_cZc&#39;) custom_gmt_max1000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max1000_filename) ## Your custom annotations ID is gp__kA2G_Mhja_e4o. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__kA2G_Mhja_e4o&#39;) custom_gmt_max10000 &lt;- upload_GMT_file( gmtfile=genesets_baderlab_genesets_max10000_filename) ## Your custom annotations ID is gp__zQNa_mLXI_tME. ## You can use this ID as an &#39;organism&#39; name in all the related enrichment tests against this custom source. ## Just use: gost(my_genes, organism = &#39;gp__zQNa_mLXI_tME&#39;) For this query we are specifying - query - the set of genes of interest, as loaded in from the gene set file. significant - set to FALSE because we want g:Profiler to return all the results not just the ones that it deems significant by its perdetermined threshold. ordered_query - set to FALSE (but you can try setting it to true as well because for this set of genes they are ordered in order of their significance) correction_method - set to fdr. by default g:Profiler uses g:Scs organism - set to the custom_gmt ID ( for this run it is - custom_gmt_max250) that we received when we uploaded our genetset file. gprofiler_results_custom_max250 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max250 ) ## Detected custom GMT source request gprofiler_results_custom_max1000 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max1000 ) ## Detected custom GMT source request gprofiler_results_custom_max10000 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max10000 ) ## Detected custom GMT source request #get the gprofiler results table enrichment_results_customgmt_max250 &lt;- gprofiler_results_custom_max250$result enrichment_results_customgmt_max1000 &lt;- gprofiler_results_custom_max1000$result enrichment_results_customgmt_max10000 &lt;- gprofiler_results_custom_max10000$result enrichment_results_customgmt_max250[1:5,] ## query significant p_value term_size query_size intersection_size ## 1 query_1 TRUE 6.957366e-21 71 108 18 ## 2 query_1 TRUE 3.993837e-20 65 108 17 ## 3 query_1 TRUE 2.921653e-16 54 108 14 ## 4 query_1 TRUE 1.861155e-15 99 108 16 ## 5 query_1 TRUE 7.455524e-15 133 108 17 ## precision recall ## 1 0.1666667 0.2535211 ## 2 0.1574074 0.2615385 ## 3 0.1296296 0.2592593 ## 4 0.1481481 0.1616162 ## 5 0.1574074 0.1278195 ## term_id ## 1 GLIOBLASTOMA SIGNALING%WIKIPATHWAYS_20250410%WP2261%HOMO SAPIENS ## 2 HEAD AND NECK SQUAMOUS CELL CARCINOMA%WIKIPATHWAYS_20250410%WP4674%HOMO SAPIENS ## 3 PATHWAYS AFFECTED IN ADENOID CYSTIC CARCINOMA%WIKIPATHWAYS_20250410%WP3651%HOMO SAPIENS ## 4 CELL CYCLE%WIKIPATHWAYS_20250410%WP179%HOMO SAPIENS ## 5 INTEGRATED BREAST CANCER PATHWAY%WIKIPATHWAYS_20250410%WP1984%HOMO SAPIENS ## source ## 1 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 2 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 3 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 4 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## 5 Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol_max250 ## term_name effective_domain_size ## 1 Glioblastoma signaling 16997 ## 2 Head and neck squamous cell carcinoma 16997 ## 3 Pathways affected in adenoid cystic carcinoma 16997 ## 4 Cell cycle 16997 ## 5 Integrated breast cancer pathway 16997 ## source_order parents ## 1 5826 ## 2 5060 ## 3 5126 ## 4 5076 ## 5 5610 Filter the table to include just the columns that are required for the generic enrichment map file results GEM. Restrict the results to just the ones that have at least min_gs_size and less than max_gs_size terms and min_intersection size include only the term_id, term_name, p_value (and p_value again because the p_value is actually the corrected p-value. The output file does not contain the nominal p_value. For down stream analysis though it is expected to have both a p-value and a q-value so just duplicate the q-value as both p-value and q-value) # filer by params defined above enrichment_results_customgmt_max250$p_value &lt;- formatC(enrichment_results_customgmt_max250$p_value, format = &quot;e&quot;, digits = 2) enrichment_results_customgmt_max250 = enrichment_results_customgmt_max250[ order(enrichment_results_customgmt_max250$p_value), c(&quot;term_id&quot;, &quot;term_name&quot;, &quot;term_size&quot;, &quot;query_size&quot;, &quot;intersection_size&quot;, &quot;p_value&quot;)] kable(head(enrichment_results_customgmt_max250, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) Table 5: Table 6: Enrichment Result term_id term_name term_size query_size intersection_size p_value 1078 SUMOYLATION OF TRANSCRIPTION COFACTORS%REACTOME%R-HSA-3899300.7 SUMOylation of transcription cofactors 42 108 3 1.00e-02 1079 PID_FOXO_PATHWAY%MSIGDB_C2%PID_FOXO_PATHWAY PID_FOXO_PATHWAY 42 108 3 1.00e-02 1080 IL26 SIGNALING%WIKIPATHWAYS_20250410%WP5347%HOMO SAPIENS IL26 signaling 42 108 3 1.00e-02 1081 GASTRULATION%GOBP%GO:0007369 gastrulation 88 108 4 1.00e-02 1082 SYNAPTIC SIGNALING ASSOCIATED WITH AUTISM SPECTRUM DISORDER%WIKIPATHWAYS_20250410%WP4539%HOMO SAPIENS Synaptic signaling associated with autism spectrum disorder 42 108 3 1.00e-02 1083 CENTRAL NERVOUS SYSTEM NEURON DEVELOPMENT%GOBP%GO:0021954 central nervous system neuron development 42 108 3 1.00e-02 1084 NEGATIVE REGULATION OF PROTEIN DEPOLYMERIZATION%GOBP%GO:1901880 negative regulation of protein depolymerization 42 108 3 1.00e-02 1085 MACROPHAGE STIMULATING PROTEIN MSP SIGNALING%WIKIPATHWAYS_20250410%WP5353%HOMO SAPIENS Macrophage stimulating protein MSP signaling 88 108 4 1.00e-02 163 RETINOBLASTOMA GENE IN CANCER%WIKIPATHWAYS_20250410%WP2446%HOMO SAPIENS Retinoblastoma gene in cancer 72 108 7 1.00e-05 164 WNT BETA CATENIN SIGNALING IN LEUKEMIA%WIKIPATHWAYS_20250410%WP3658%HOMO SAPIENS Wnt beta catenin signaling in leukemia 24 108 5 1.00e-05 165 BIOCARTA_RACCYCD_PATHWAY%MSIGDB_C2%BIOCARTA_RACCYCD_PATHWAY BIOCARTA_RACCYCD_PATHWAY 24 108 5 1.00e-05 166 TRANSCRIPTIONAL REGULATION BY RUNX1%REACTOME DATABASE ID RELEASE 92%8878171 Transcriptional regulation by RUNX1 190 108 10 1.00e-05 514 MYELOID CELL DIFFERENTIATION%GOBP%GO:0030099 myeloid cell differentiation 172 108 7 1.01e-03 515 KIDNEY MORPHOGENESIS%GOBP%GO:0060993 kidney morphogenesis 40 108 4 1.02e-03 516 NEGATIVE REGULATION OF CELL PROLIFERATION INVOLVED IN HEART MORPHOGENESIS%GOBP%GO:2000137 negative regulation of cell proliferation involved in heart morphogenesis 3 108 2 1.02e-03 517 PROSTATE GLAND EPITHELIUM MORPHOGENESIS%GOBP%GO:0060740 prostate gland epithelium morphogenesis 3 108 2 1.02e-03 518 LOSS OF FUNCTION OF SMAD4 IN CANCER%REACTOME DATABASE ID RELEASE 92%3304347 Loss of Function of SMAD4 in Cancer 3 108 2 1.02e-03 519 PRESYNAPTIC PHASE OF HOMOLOGOUS DNA PAIRING AND STRAND EXCHANGE%REACTOME%R-HSA-5693616.6 Presynaptic phase of homologous DNA pairing and strand exchange 40 108 4 1.02e-03 520 NEGATIVE REGULATION OF MAMMARY GLAND EPITHELIAL CELL PROLIFERATION%GOBP%GO:0033600 negative regulation of mammary gland epithelial cell proliferation 3 108 2 1.02e-03 521 REGULATION OF CELL PROLIFERATION INVOLVED IN HEART VALVE MORPHOGENESIS%GOBP%GO:0003250 regulation of cell proliferation involved in heart valve morphogenesis 3 108 2 1.02e-03 #kable(tail(enrichment_results_customgmt_max250, n=20), caption = &quot;Enrichment Result&quot;) %&gt;% #kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;condensed&quot;), font_size = 10) ##YOUR TURN## ## Display the top tables for the gprofiler_results_custom_max1000 and enrichment_results_customgmt_max10000 results Exercise 2 - visualization We will use clusterProfiler style visualization. ### Step 1 - Bar plot ##Calculate a score enrichment_results_customgmt_max250$score = -log10(as.numeric(enrichment_results_customgmt_max250$p_value)) enrichmentTidy &lt;- enrichment_results_customgmt_max250 %&gt;% as_tibble() %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTidy, aes(reorder(term_name, score), score)) + geom_col(aes(fill = score), width=0.8) + scale_fill_gradient(low = &quot;#C1F6F8&quot;, high = &quot;#00BFC4&quot;)+ coord_flip() + labs(x=&quot;&quot;, y=&quot;Normalized Enrichment Score&quot;, title=&quot;Pathway enrichment analysis &quot;) + theme_minimal() p Step 2 - Dot plot with segment enrichmentTop20 &lt;- enrichmentTidy %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTop20, aes( y = fct_reorder(term_name, score), x = score, color = score, size = score )) + geom_point() + scale_color_gradientn( colours = c(&quot;#56A443&quot;, &quot;#8AA443&quot;, &quot;#f7ca64&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = FALSE, order = 1) ) + scale_size_continuous(range = c(4, 8)) + theme_bw(base_size = 12) + xlab(&quot;score -log10(adj pvalue)&quot;) + ylab(NULL) + ggtitle(&quot;Pathway Enrichment Analysis&quot;) + theme( axis.text.y = element_text(size = 10) ) p Step 3 - Ridge plot enrichmentTop20 &lt;- enrichmentTidy %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) # Expand each term to have multiple x values ridge_data &lt;- enrichmentTop20 %&gt;% rowwise() %&gt;% mutate(x_vals = list(seq(-1, 1, length.out = 100))) %&gt;% unnest(x_vals) p = ggplot(ridge_data, aes( x = x_vals, y = fct_reorder(term_name, score), height = score, group = term_name, fill = score )) + geom_density_ridges( stat = &quot;identity&quot;, scale = 0.9, rel_min_height = 0.01, color = &quot;white&quot;, alpha = 0.9 ) + scale_fill_gradientn( colours = c(&quot;#E6194B&quot;, &quot;#3CB44B&quot;, &quot;#4363D8&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(title = &quot;-log10(p-value)&quot;) ) + theme_ridges(font_size = 12, grid = TRUE) + xlim(-1.2, 1.2) + xlab(&quot;&quot;) + ylab(NULL) + ggtitle(&quot;Pathway enrichment analysis&quot;) p = p + theme_minimal(base_size = 12) p Step 4 - Network visualization - EnrichmentMap Get names of genes in the overlap for each pathway gprofiler_results_custom_max250 &lt;- gost(query = query_set , significant=TRUE, ordered_query = FALSE, exclude_iea=TRUE, correction_method = &quot;fdr&quot;, organism = custom_gmt_max250 ) subset_genesets &lt;- genesets_baderlab_genesets$genesets[which(genesets_baderlab_genesets$geneset.names %in% gprofiler_results_custom_max250$result$term_id)] genes &lt;- lapply(subset_genesets,FUN=function(x){intersect(x,query_set)}) # For each of the genes collapse to the comma separate text genes_collapsed &lt;- unlist(lapply(genes,FUN=function(x){paste(x,collapse = &quot;,&quot;)})) genes_collapsed_df &lt;- data.frame( term_id = names(genes), genes = genes_collapsed,stringsAsFactors = FALSE) formatted_results &lt;- merge(gprofiler_results_custom_max250$result,genes_collapsed_df,by.x=&quot;term_id&quot; , by.y=&quot;term_id&quot; ) formatted_results &lt;- formatted_results[order(formatted_results$p_value),] colnames(formatted_results) ## [1] &quot;term_id&quot; &quot;query&quot; &quot;significant&quot; ## [4] &quot;p_value&quot; &quot;term_size&quot; &quot;query_size&quot; ## [7] &quot;intersection_size&quot; &quot;precision&quot; &quot;recall&quot; ## [10] &quot;source&quot; &quot;term_name&quot; &quot;effective_domain_size&quot; ## [13] &quot;source_order&quot; &quot;parents&quot; &quot;genes&quot; formatted_results_sel = formatted_results[ , c(&quot;term_name&quot;, &quot;genes&quot;) ] Create the enrichment map # Create your data frame df = formatted_results_sel[1:10,] # Step 2: Convert gene strings into lists df$gene_list &lt;- strsplit(df$genes, &quot;,&quot;) # Create edges based on shared genes edges &lt;- data.frame(from = character(), to = character(), weight = integer(), stringsAsFactors = FALSE) for (i in 1:(nrow(df) - 1)) { for (j in (i + 1):nrow(df)) { genes_i &lt;- df$gene_list[[i]] genes_j &lt;- df$gene_list[[j]] shared_genes &lt;- intersect(genes_i, genes_j) if (length(shared_genes) &gt; 0) { edges &lt;- rbind(edges, data.frame( from = df$term_name[i], to = df$term_name[j], weight = length(shared_genes), stringsAsFactors = FALSE )) } } } # Create igraph object g &lt;- graph_from_data_frame(d = edges, vertices = df$term_name, directed = FALSE) # Plot the graph p = plot( g, vertex.label.cex = 0.8, vertex.label.color = &quot;black&quot;, vertex.size = 30, edge.width = E(g)$weight, edge.color = &quot;gray50&quot;, vertex.color = &quot;skyblue&quot;, layout = layout_with_fr(g) ) "],["gsea-lab.html", "Module 2 lab - fGSEA Introduction Goal of the exercise Data Background Additional information Bonus - Automation.", " Module 2 lab - fGSEA Presenter: Ruth Isserlin Introduction This practical lab contains one exercise. It uses fGSEA to perform a gene-set enrichment analysis. Goal of the exercise Learn how to run fGSEA and explore the results. Data The data used in this exercise is gene expression (transcriptomics) obtained from high-throughput RNA sequencing of Pancreatic Ductal Adenocarcinoma samples (TCGA-PAAD). This cohort has been previously stratified into many different set of subtypes PMID:36765128 with the Moffitt Basal vs Classical subtypes compared to demonstrate the GSEA workflow. How was the data processed? Gene expression from the TCGA Pancreatic Ductal Adenocarcinoma RNASeq cohort was downloaded on 2024-06-06 from Genomic Data Commons using the TCGABiolinks R package. Differential expression for all genes between the Basal and Classical groups was estimated using edgeR. The R code used to generate the data and the rank file used in GSEA is included at the bottom of the document in the Additional information section. Background The goal of this lab is to: Upload the 2 required files into GSEA, Adjust relevant parameters, Run fGSEA, Open and explore the gene-set enrichment results. The 2 required files are: a rank file (.rnk) a pathway definition file (.gmt). Rank File To generate a rank file (.rnk), a score (-log10(pvalue) * sign(logFC)) was calculated from the edgeR differential expression results. A gene that is significantly differentially expressed (i.e associated with a very small pvalue, close to 0) will be assigned a high score.The sign of the logFC indicates if the gene has an expression which is higher in Basel (logFC &gt; 0, the score will have a + sign) or lower in Classical (logFC &lt; 0, the score will have a - sign). It is used to rank the genes from top up-regulated to top down-regulated (all genes have to be included). The rank file is going to be provided for the lab, you don’t need to generate it. How to generate a rank file. Calculation of the score Generation of the rank file Select the gene names and score columns and save the file as tab delimited with the extension .rnk Pathway defintion file The second file that is needed for GSEA is the pathway database, a file with the .gmt extension. The pathway database (.gmt) used for the GSEA analysis was downloaded from http://baderlab.org/GeneSets. This file contains gene-sets obtained from MsigDB-c2 and Hallmarks, NCI, Biocarta, IOB, Netpath, HumanCyc, Reactome, Panther, Pathbank, WikiPathways and the Gene Ontology (GO) databases. You don’t need to perform this step for the exercise, the .gmt file will be given to you. Go to: http://download.baderlab.org/EM_Genesets/ Click on May_01_2025/ Click on Human/ Click on symbol/ Save the Human_GOBP_AllPathways_noPFOCR_no_GO_iea…gmt file on your computer The .gmt is a tab delimited text file which contains one gene-set per row. For each gene-set (row), the first 2 columns contain the name and the description of the gene-set and the remaining columns contain the list of genes included in the gene-set. It is possible to create a custom gene-set using Excel or R. GSEA performs a gene-set enrichment analysis using a modified Kolmogorov-Smirnov statistic. The output result consists of summary tables displaying enrichment statistics for each gene-set (pathway) that has been tested. Start the exercise Before starting this exercise, download the 2 required files: Right click on link below and select “Save Link As…”. Place it in the corresponding module directory of your CBW work directory. Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol.gmt TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk Step1. Load required libraries. # CRAN and Bioconductor setup if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) # List of CRAN packages cran_packages &lt;- c( &quot;tidyverse&quot;, &quot;knitr&quot;, &quot;kableExtra&quot;, &quot;glue&quot;, &quot;RCurl&quot;, &quot;webshot2&quot;, &quot;ggridges&quot;, &quot;igraph&quot;, &quot;stringr&quot;, &quot;data.table&quot; ) # List of Bioconductor packages bioc_packages &lt;- c( &quot;gprofiler2&quot;, &quot;GSA&quot;, &quot;fgsea&quot;, &quot;clusterProfiler&quot;, &quot;enrichplot&quot; ) # Install CRAN packages if not already installed for (pkg in cran_packages) { if (!requireNamespace(pkg, quietly = TRUE)) { install.packages(pkg) } } # Install Bioconductor packages if not already installed for (pkg in bioc_packages) { if (!requireNamespace(pkg, quietly = TRUE)) { BiocManager::install(pkg) } } # Load the libraries library(tidyverse) library(knitr) library(kableExtra) library(glue) library(RCurl) library(webshot2) library(ggridges) library(igraph) library(stringr) library(data.table) # Bioconductor packages library(gprofiler2) library(GSA) library(fgsea) library(clusterProfiler) library(enrichplot) Step 2. Set up parameters need for the analysis. # defined in the paramters at top of notebook #directory where all the data files are found. working_dir &lt;- &quot;./data/&quot; #directory where all the data files are found. output_dir &lt;- &quot;./generated_data/&quot; if(!exists(output_dir)){ dir.create(output_dir) } ## Warning in dir.create(output_dir): &#39;./generated_data&#39; already exists #The name to give the analysis in GSEA - for example analysis_name &lt;- &quot;Basal_vs_Classical&quot; #rank file to use in GSEA analysis. rnk_file &lt;- &quot;TCGA-PAAD_GDC_Subtype_Moffitt_BasalvsClassical_ranks.rnk&quot; #set the gmt file you want to use if you don&#39;t want to use the latest gmt file. # For example, if you set dest_gmt_file ==&quot;&quot; the below script will automatically # download the latest gmt file from baderlab webstie. If it is set then it # will use the file specified. dest_gmt_file = &quot;Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol.gmt&quot; Step 3. Download the latest pathway definition file Only Human, Mouse, Rat, and Woodchuck gene set files are currently available on the baderlab downloads site. If you are working with a species other than human (and it is either rat,mouse or woodchuck) change the gmt_url below to the correct species. Check here to see all available species. #flag to trigger download of latest gmt file - change to TRUE # if you want to check the website and download the latest # version instead of using the specified May 01, 2025 version. downlaod_latest_version = FALSE if((dest_gmt_file == &quot;&quot;) &amp;&amp; download_latest_version){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/current_release/Human/symbol/&quot; #list all the files on the server filenames = getURL(gmt_url) tc = textConnection(filenames) contents = readLines(tc) close(tc) #get the gmt that has all the pathways and does not include terms # inferred from electronic annotations(IEA) #start with gmt file that has pathways only and GO Biological Process only. rx = gregexpr(&quot;(?&lt;=&lt;a href=\\&quot;)(.*.GOBP_AllPathways_noPFOCR_no_GO_iea.*.)(.gmt)(?=\\&quot;&gt;)&quot;, contents, perl = TRUE) gmt_file = unlist(regmatches(contents, rx)) dest_gmt_file &lt;- file.path(output_dir,gmt_file ) #check if this gmt file already exists if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } }else if(!downlaod_latest_version){ gmt_url = &quot;http://download.baderlab.org/EM_Genesets/May_01_2025/Human/symbol/&quot; gmt_file = &quot;Human_GOBP_AllPathways_noPFOCR_no_GO_iea_May_01_2025_symbol.gmt&quot; #download the specific file specified above dest_gmt_file &lt;- file.path(working_dir,gmt_file) if(!file.exists(dest_gmt_file)){ download.file( paste(gmt_url,gmt_file,sep=&quot;&quot;), destfile=dest_gmt_file ) } file.copy(dest_gmt_file,to = output_dir) } ## [1] FALSE Load your gmt file capture.output(all_gs &lt;- GSA.read.gmt(dest_gmt_file) ,file=&quot;gsa_load.out&quot;) names(all_gs$genesets) &lt;- all_gs$geneset.names Step 4. Load your Rank file current_ranks &lt;- read.table(file.path(working_dir,rnk_file),header=TRUE,sep = &quot;\\t&quot;) fgsea_ranks &lt;- current_ranks[,2] names(fgsea_ranks) &lt;- current_ranks[,1] current_ranks &lt;- fgsea_ranks #remove duplicated genes duplicated_gene_names &lt;- names(current_ranks)[which(duplicated(names(current_ranks)))] current_ranks &lt;- current_ranks[which(!names(current_ranks) %in% duplicated_gene_names)] current_ranks &lt;- sort(current_ranks,decreasing = TRUE) Step 5. Run fGSEA - Adjust parameters fGSEA is an R package that runs a fast Gene Set Enrichment Analysis. In the below command the following options have been specified: pathways - list of genesets to use for the calculation stats - genes and their associated statistic, sorted max_size - maximum size for individual gene sets. In GSEA interface this is set to 500 but we prefer to use a more stringent setting of 200. min_size - minimum size for individual gene sets gseaParam - GSEA parameter value gseaParam - GSEA parameter value. All ranks will be raised to this power when calculating the ES scores. Equivalent to the weight in the original GSEA algorithm. current_fgsea_results &lt;- fgsea::fgsea(all_gs$genesets, current_ranks, minSize=15, maxSize = 500 ) Set gseaParam to 2 if you want to add more weight on the most top up-regulated and top down-regulated. 2 is a more stringent parameter and it will result in less gene-sets significant under FDR &lt;0.05. Step 6. Examining the results Get the top results and visualize as table topPathwaysUp &lt;- current_fgsea_results[ES &gt; 0][head(order(pval), n=10), pathway] topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=10), pathway] topPathways &lt;- c(topPathwaysUp, rev(topPathwaysDown)) plotGseaTable(all_gs$genesets[topPathways], current_ranks, current_fgsea_results, gseaParam=0.5) When examining the results there are a few things to look for: Check the number of gene-sets that have been used for the analysis. A small number (a few hundred genesets if using baderlab genesets) could indicate an issue with identifier mapping. Check the number of sets that have FDR less than 0.25 – in order to determine what thresholds to start with when creating the enrichment map. It is not uncommon to see a thousand gene sets pass the threshold of FDR less than 0.25. FDR less than 0.25 is a very lax threshold and for robust data we can set thresholds of FDR less than 0.05 or lower. Number of pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05)) ## [1] 437 Number of pathways with corrected pvalue &lt; 0.01 length(which(current_fgsea_results$padj &lt; 0.01)) ## [1] 210 Number of Basal (up -regulated) pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05 &amp; current_fgsea_results$ES &gt; 0)) ## [1] 351 Number of Classical (down -regulated) pathways with corrected pvalue &lt; 0.05 length(which(current_fgsea_results$padj &lt; 0.05 &amp; current_fgsea_results$ES &lt; 0)) ## [1] 86 5e. Explore the tabular format of the results. Basal topPathwaysUp &lt;- current_fgsea_results[ES &gt; 0][head(order(pval), n=5), pathway] top_basal_hits &lt;- current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysUp),] #format the pathway name colum so that it is easier to see the whole table top_basal_hits$pathway &lt;- substr(top_basal_hits$pathway, start = 1, stop=25) top_basal_hits ## pathway pval padj log2err ES ## &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; ## 1: CELL CYCLE CHECKPOINTS%RE 7.079826e-10 5.531999e-07 0.8012156 0.5400523 ## 2: CELL CYCLE, MITOTIC%REACT 4.342265e-16 1.357175e-12 1.0376962 0.5211659 ## 3: HALLMARK_EPITHELIAL_MESEN 5.127072e-17 3.204933e-13 1.0672100 0.6962643 ## 4: KERATINIZATION%REACTOME%R 1.010034e-10 1.331841e-07 0.8390889 0.8141973 ## 5: SKIN DEVELOPMENT%GOBP%GO: 4.803756e-10 4.289754e-07 0.8012156 0.7078168 ## NES size leadingEdge ## &lt;num&gt; &lt;int&gt; &lt;list&gt; ## 1: 1.992817 243 PSMD2, M.... ## 2: 2.032521 469 PSMD2, M.... ## 3: 2.452578 156 SNAI2, T.... ## 4: 2.358098 47 KRT6A, K.... ## 5: 2.274276 87 KRT6A, A.... Classical topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=5), pathway] top_classical_hits &lt;- current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysDown),] #format the pathway name colum so that it is easier to see the whole table top_classical_hits$pathway &lt;- substr(top_classical_hits$pathway, start = 1, stop=25) top_classical_hits ## pathway pval padj log2err ES ## &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; ## 1: AEROBIC RESPIRATION AND R 2.238120e-08 9.058771e-06 0.7337620 -0.5399018 ## 2: BIOLOGICAL OXIDATIONS%REA 3.123234e-10 3.253889e-07 0.8140358 -0.6362964 ## 3: CARBOXYLIC ACID METABOLIC 5.453989e-08 1.482299e-05 0.7195128 -0.4563033 ## 4: CELLULAR RESPONSE TO XENO 1.065302e-10 1.331841e-07 0.8390889 -0.7080315 ## 5: XENOBIOTIC METABOLIC PROC 4.903112e-11 1.021645e-07 0.8513391 -0.7533267 ## NES size leadingEdge ## &lt;num&gt; &lt;int&gt; &lt;list&gt; ## 1: -1.874926 228 MPC2, MP.... ## 2: -2.108214 148 CYP2S1, .... ## 3: -1.686248 490 ALDOB, C.... ## 4: -2.214560 97 FMO5, HN.... ## 5: -2.284586 78 FMO5, HN.... Step 7 Visualize the top results as different sorts of plots, as demonstrated in the first part of the lab. GSEA style Enrichment Plots In order to create GSEA Enrichment plots we need to use the package: ClusterProfiler and enrichplot Clusterprofiler runs with its own set of pathways that it parses from GO or KEGG or MSigDB or other sources that are coded into the package. It does not take as input the standard GMT file. If you want to use your own pathway definitions you need to translate it into a dataframe where for every gene in a given pathway there is a row with the pathway name and the gene. In order to generate an enrichment plot with enrichplot we need the fgsea results in the datastructure returned by Clusterprofiler. To run fGSEA in this way we need: * the ranks file, as before * the pathways as a data frame. Below we show how to run fGSEA using the ClusterProfiler package and user supplied pathway definitions. #translate our all_gs gmt file into a dataframe. TERMS = cbind.data.frame( name = rep( names(all_gs$genesets), unlist(lapply(all_gs$genesets, FUN=function(x){length(x)})) ), gene = unlist(all_gs$genesets) ) # specify the gene ranks, and make sure it is in descending order. gsea_scores &lt;- current_ranks #names(gsea_scores) &lt;- ranks gsea_scores &lt;- sort(gsea_scores, decreasing = TRUE) gsea_scores &lt;- gsea_scores[!is.na(gsea_scores)] # Set a seed for reproducibility (optional) set.seed(123) #Run fgsea using clusterProfiler. selected_gsea &lt;- clusterProfiler::GSEA( geneList = gsea_scores, TERM2GENE = TERMS, minGSSize = 15, maxGSSize = 500, pvalueCutoff = 10, verbose = T, pAdjustMethod = &quot;fdr&quot;, scoreType = &#39;std&#39;, eps = 0, #seed = myseed ) ## using &#39;fgsea&#39; for GSEA analysis, please cite Korotkevich et al (2019). ## preparing geneSet collections... ## GSEA analysis... ## leading edge analysis... ## done... Print out a few of the top enrichment plots all_figures &lt;- list() #gerenrate GSEA plots for a few of the Top Up genesets that we have already seen in the initial analysis rows_to_use &lt;- which(selected_gsea@result$ID %in% topPathwaysDown) for(i in 1:length(rows_to_use)){ row_number = rows_to_use[i] #format the title for the enrichment plot pw_des &lt;- selected_gsea@result$Description[row_number] pw_pval &lt;- selected_gsea@result$pvalue[row_number] pw_pval &lt;- format(pw_pval, scientific = F, digits = 3) pw_qval &lt;- selected_gsea@result$p.adjust[row_number] pw_qval &lt;- format(pw_qval, scientific = F, digits = 3) pw_nes &lt;- selected_gsea@result$NES[row_number] pw_nes &lt;- format(pw_nes, scientific = F, digits = 2) pw_es &lt;- selected_gsea@result$enrichmentScore[row_number] pw_es &lt;- format(pw_es, scientific = F, digits = 2) mytitle &lt;- glue::glue(&#39;{pw_des}\\n(pval: {pw_pval}, qval: {pw_qval}, NES: {pw_nes}, ES: {pw_es})&#39;) figure &lt;- enrichplot::gseaplot2( selected_gsea, geneSetID = 1, title = mytitle, color = &quot;green2&quot;, base_size = 12, rel_heights = c(1.5, 0.5, 1), subplots = 1:3, pvalue_table = F, ES_geom = &quot;line&quot; ) all_figures[[i]] &lt;- figure } capture.output(print(all_figures[1:3]),file = &quot;figure_outputs.txt&quot;) Bar plots top pathways associated with classical topPathwaysDown &lt;- current_fgsea_results[ES &lt; 0][head(order(pval), n=20), pathway] enrichment_results_topdown &lt;-current_fgsea_results[which(current_fgsea_results$pathway %in% topPathwaysDown),] #change the name to be just the first part of the name enrichment_results_topdown$pathway &lt;- unlist(lapply(enrichment_results_topdown$pathway, FUN=function(x){unlist(strsplit(x,split = &quot;%&quot;))[1]})) ##Calculate a score enrichment_results_topdown$score = -log10(as.numeric(enrichment_results_topdown$pval)) enrichmentTidy &lt;- enrichment_results_topdown %&gt;% as_tibble() %&gt;% arrange(desc(score)) %&gt;% slice_head(n = 20) p = ggplot(enrichmentTidy, aes(reorder(pathway, score), score)) + geom_col(aes(fill = score), width=0.8) + scale_fill_gradient(low = &quot;#C1F6F8&quot;, high = &quot;#00BFC4&quot;)+ coord_flip() + labs(x=&quot;&quot;, y=&quot;Normalized Enrichment Score&quot;, title=&quot;Pathway enrichment analysis - \\nClassical PDAC&quot;) + theme_minimal() p ##YOUR TURN## ## Generate the same bar plot for the top 20 Basal results. ## Change the colour of the bars to a different colour as ## they are a different phenotype than the Classical set. Dot plot top pathways associated with classical p = ggplot(enrichment_results_topdown, aes( y = fct_reorder(pathway, score), x = score, color = score, size = score )) + geom_point() + scale_color_gradientn( colours = c(&quot;lightpink&quot;, &quot;lightblue&quot;, &quot;blue&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = FALSE, order = 1) ) + scale_size_continuous(range = c(4, 8)) + theme_bw(base_size = 12) + xlab(&quot;score -log10(adj pvalue)&quot;) + ylab(NULL) + ggtitle(&quot;Pathway Enrichment Analysis - \\n Classical PDAC&quot;) + theme( axis.text.y = element_text(size = 7) ) p ##YOUR TURN## ## Generate the same dot plot for the top 20 Basal results. ## Change the colour of the bars to a different colour range as ## they are a different phenotype than the Classical set. Ridge plots top pathways associated with either class # Filter top pathways, e.g., by adjusted p-value topPathways &lt;- current_fgsea_results[padj &lt; 0.05][order(padj)][1:10] # Create a data.frame for plotting with the gene ranks for each of the top pathways ridge_data &lt;- rbindlist(lapply(topPathways$pathway, function(pw) { genes &lt;- all_gs$genesets[[pw]] data.frame( gene = genes, stat = current_ranks[genes], pathway = pw ) })) # get NES for each of the top pathways nes_map &lt;- setNames(topPathways$NES, topPathways$pathway) # Add NES values to ridge_data ridge_data$NES &lt;- nes_map[ridge_data$pathway] #change the name to be just the first part of the name (because the actual names are too long) ridge_data$pathway &lt;- unlist(lapply(ridge_data$pathway, FUN=function(x){unlist(strsplit(x,split = &quot;%&quot;))[1]})) #get rid of na values for genes found in the gene set but not ranked in our dataset. ridge_data &lt;- ridge_data[!is.na(ridge_data$stat),] ggplot(ridge_data, aes(x = stat, y = reorder(pathway, NES), fill = NES)) + geom_density_ridges(scale = 2, alpha = 0.8) + scale_fill_gradient2( low = &quot;blue&quot;, mid = &quot;white&quot;, high = &quot;red&quot;, midpoint = 0, name = &quot;NES&quot; ) + theme_ridges() + theme(legend.position = &quot;right&quot;,axis.text.y = element_text(size = 6)) + labs( title = &quot;Ridgeplot of Gene Stats\\n for Top Enriched Pathways&quot;, x = &quot;Gene-level Statistic&quot;, y = &quot;Pathway&quot; ) Step 8 The above plots are only showing a small piece of the underlying data. Ideally we would like to visualize all the signficant results in one figure. To do that we need to use Cytoscape. Unfortunately that is beyond the scope of this current workshop but we will demo it quickly at the end of the workshop. Output the results so we can visualize the results with programs like cytoscape. In order to do that we need to format the fGSEA output as a file that would be created by GSEA. Required columns include: * pathway name * pathway description * Details column - found in the GSEA results file but it is not used by Cytoscape * size - gene set size * ES - enrichment score * NES - normalized enrichment score * Pval - empirical p-value * Padj - adjusted p-value * FWER * Rank at max - the rank of the gene when the ES score is at is max/min * leading edge genes - the set of genes that contribute to the enrichment of this set. Create a function to output the properly formatted fgsea result. The Function requires: * current_fgsea_results - fgsea results returned * current_results_dir - directory to the resulting file * current_sample - name to give the file write_sample_fgsea_results&lt;- function(current_fgsea_results, current_results_dir, current_sample){ current_sample &lt;- current_sample current_sample_directory_fullpath &lt;- file.path(current_results_dir, current_sample) if(!dir.exists(current_sample_directory_fullpath)){ dir.create(current_sample_directory_fullpath) } #calculate the rank at max #fgsea returns the leading edge. Just need to extract the highest rank from # set to get the rank at max calculated_rank_at_max &lt;- apply(current_fgsea_results,1,FUN=function(x){ max(which(names(current_ranks) %in% unlist(x[8])))}) fakeenr_current_sample &lt;- cbind(current_fgsea_results$pathway, current_fgsea_results$pathway, &quot;Details&quot;, current_fgsea_results$size, current_fgsea_results$ES, current_fgsea_results$NES, current_fgsea_results$pval, current_fgsea_results$padj, 0, calculated_rank_at_max, apply(current_fgsea_results,1, FUN=function(x){paste(unlist(x[8]),collapse=&quot;,&quot;)})) colnames(fakeenr_current_sample) &lt;- c(&quot;name&quot;,&quot;description&quot;,&quot;GS details&quot;,&quot;SIZE&quot;,&quot;ES&quot;,&quot;NES&quot;,&quot;pval&quot;,&quot;padj&quot;,&quot;FWER&quot;,&quot;Rank at Max&quot;,&quot;leading edge genes&quot;) fakeenr_filename &lt;- paste0(current_sample, &quot;_fgsea_enr_results.txt&quot;,sep=&quot;&quot;) fakeenr_filename_docker &lt;- file.path(current_sample_directory_fullpath,fakeenr_filename) write.table(fakeenr_current_sample , fakeenr_filename_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;latin1&quot;) # &quot;upload&quot; the files to the host machine and replace each path with the host machine path #create a fake expression file fakeexp &lt;- data.frame(name = names(current_ranks), description = names(current_ranks),current_ranks) fakeexp_filename &lt;- paste0(current_sample,&quot;fakeexpression.txt&quot;,sep=&quot;&quot;) fakeexp_name_docker &lt;- file.path( current_sample_directory_fullpath,fakeexp_filename) write.table(fakeexp, fakeexp_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) #create a rank expression file fakernk &lt;- data.frame(name = names(current_ranks), current_ranks) fakernk_filename &lt;- paste0(current_sample,&quot;fakeranks.rnk&quot;,sep=&quot;&quot;) fakernk_name_docker &lt;- file.path( current_sample_directory_fullpath,fakernk_filename) write.table(fakernk, fakernk_name_docker, col.name=TRUE,sep=&quot;\\t&quot;,row.names=FALSE,quote=FALSE,fileEncoding=&quot;&quot;) } #write out the fgsea results for this dataset write_sample_fgsea_results(current_fgsea_results,output_dir,analysis_name) ##YOUR TURN## ## Using the file we just created try and create an enrichment map ## in Cytoscape - see the bonus work for example notebooks with the ## detailed instructions Link to information about GSEA results Additional information More on GSEA data format More on processing the RNAseq using EdgeR and generate the .rank file More on which .gmt file to download from the Baderlab gene-set file, select current release, Human, symbol, Human_GOBP_AllPathways_no_GO_iea_….gmt More on GSEA : link to the Baderlab wiki page on GSEA Bonus - Automation. Run analysis directly from R for easy integration into existing pipelines. Try out Cytoscape - following this tutorial - https://baderlab.github.io/CBW_Pathways_2024/cytoscape_mod3.html Create an enrichment map from g:profiler or GSEA results - https://baderlab.github.io/CBW_Pathways_2024/gprofiler_mod3.html https://baderlab.github.io/CBW_Pathways_2024/gsea_mod3.html Instead of using the GSEA application you can run it directly from R using the GSEA java jar that can be easily used within the workshop docker image (workshop_base_image) that you setup duing your prework. Follow the step by step instructions on how to run from R here - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/run-gsea-from-within-r.html First, make sure your environment is set up correctly by following there instructions - https://risserlin.github.io/CBW_pathways_workshop_R_notebooks/setup.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
